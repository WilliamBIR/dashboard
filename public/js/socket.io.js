/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/socket.io.js":
/*!***********************************!*\
  !*** ./resources/js/socket.io.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * Socket.IO v4.4.0\n * (c) 2014-2021 Guillermo Rauch\n * Released under the MIT License.\n */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  function t(e) {\n    return t = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n      return _typeof(t);\n    } : function (t) {\n      return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n    }, t(e);\n  }\n\n  function e(t, e) {\n    if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function n(t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var r = e[n];\n      r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);\n    }\n  }\n\n  function r(t, e, r) {\n    return e && n(t.prototype, e), r && n(t, r), t;\n  }\n\n  function o() {\n    return o = Object.assign || function (t) {\n      for (var e = 1; e < arguments.length; e++) {\n        var n = arguments[e];\n\n        for (var r in n) {\n          Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n        }\n      }\n\n      return t;\n    }, o.apply(this, arguments);\n  }\n\n  function i(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), e && a(t, e);\n  }\n\n  function s(t) {\n    return s = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    }, s(t);\n  }\n\n  function a(t, e) {\n    return a = Object.setPrototypeOf || function (t, e) {\n      return t.__proto__ = e, t;\n    }, a(t, e);\n  }\n\n  function c(t) {\n    if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return t;\n  }\n\n  function u(t, e) {\n    if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n    if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return c(t);\n  }\n\n  function h(t) {\n    var e = function () {\n      if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n      if (Reflect.construct.sham) return !1;\n      if (\"function\" == typeof Proxy) return !0;\n\n      try {\n        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;\n      } catch (t) {\n        return !1;\n      }\n    }();\n\n    return function () {\n      var n,\n          r = s(t);\n\n      if (e) {\n        var o = s(this).constructor;\n        n = Reflect.construct(r, arguments, o);\n      } else n = r.apply(this, arguments);\n\n      return u(this, n);\n    };\n  }\n\n  function f(t, e, n) {\n    return f = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get : function (t, e, n) {\n      var r = function (t, e) {\n        for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = s(t));) {\n          ;\n        }\n\n        return t;\n      }(t, e);\n\n      if (r) {\n        var o = Object.getOwnPropertyDescriptor(r, e);\n        return o.get ? o.get.call(n) : o.value;\n      }\n    }, f(t, e, n || t);\n  }\n\n  function l(t, e) {\n    (null == e || e > t.length) && (e = t.length);\n\n    for (var n = 0, r = new Array(e); n < e; n++) {\n      r[n] = t[n];\n    }\n\n    return r;\n  }\n\n  function p(t, e) {\n    var _n = \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n\n    if (!_n) {\n      if (Array.isArray(t) || (_n = function (t, e) {\n        if (t) {\n          if (\"string\" == typeof t) return l(t, e);\n          var n = Object.prototype.toString.call(t).slice(8, -1);\n          return \"Object\" === n && t.constructor && (n = t.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(t) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? l(t, e) : void 0;\n        }\n      }(t)) || e && t && \"number\" == typeof t.length) {\n        _n && (t = _n);\n\n        var r = 0,\n            o = function o() {};\n\n        return {\n          s: o,\n          n: function n() {\n            return r >= t.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: t[r++]\n            };\n          },\n          e: function e(t) {\n            throw t;\n          },\n          f: o\n        };\n      }\n\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    var i,\n        s = !0,\n        a = !1;\n    return {\n      s: function s() {\n        _n = _n.call(t);\n      },\n      n: function n() {\n        var t = _n.next();\n\n        return s = t.done, t;\n      },\n      e: function e(t) {\n        a = !0, i = t;\n      },\n      f: function f() {\n        try {\n          s || null == _n[\"return\"] || _n[\"return\"]();\n        } finally {\n          if (a) throw i;\n        }\n      }\n    };\n  }\n\n  var d = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n      y = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\", \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"],\n      v = function v(t) {\n    var e = t,\n        n = t.indexOf(\"[\"),\n        r = t.indexOf(\"]\");\n    -1 != n && -1 != r && (t = t.substring(0, n) + t.substring(n, r).replace(/:/g, \";\") + t.substring(r, t.length));\n\n    for (var o, i, s = d.exec(t || \"\"), a = {}, c = 14; c--;) {\n      a[y[c]] = s[c] || \"\";\n    }\n\n    return -1 != n && -1 != r && (a.source = e, a.host = a.host.substring(1, a.host.length - 1).replace(/;/g, \":\"), a.authority = a.authority.replace(\"[\", \"\").replace(\"]\", \"\").replace(/;/g, \":\"), a.ipv6uri = !0), a.pathNames = function (t, e) {\n      var n = /\\/{2,9}/g,\n          r = e.replace(n, \"/\").split(\"/\");\n      \"/\" != e.substr(0, 1) && 0 !== e.length || r.splice(0, 1);\n      \"/\" == e.substr(e.length - 1, 1) && r.splice(r.length - 1, 1);\n      return r;\n    }(0, a.path), a.queryKey = (o = a.query, i = {}, o.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function (t, e, n) {\n      e && (i[e] = n);\n    }), i), a;\n  };\n\n  var m = {\n    exports: {}\n  };\n\n  try {\n    m.exports = \"undefined\" != typeof XMLHttpRequest && \"withCredentials\" in new XMLHttpRequest();\n  } catch (t) {\n    m.exports = !1;\n  }\n\n  var g = m.exports,\n      k = \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : Function(\"return this\")();\n\n  function b(t) {\n    var e = t.xdomain;\n\n    try {\n      if (\"undefined\" != typeof XMLHttpRequest && (!e || g)) return new XMLHttpRequest();\n    } catch (t) {}\n\n    if (!e) try {\n      return new k[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n    } catch (t) {}\n  }\n\n  function w(t) {\n    for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++) {\n      n[r - 1] = arguments[r];\n    }\n\n    return n.reduce(function (e, n) {\n      return t.hasOwnProperty(n) && (e[n] = t[n]), e;\n    }, {});\n  }\n\n  var _ = setTimeout,\n      E = clearTimeout;\n\n  function A(t, e) {\n    e.useNativeTimers ? (t.setTimeoutFn = _.bind(k), t.clearTimeoutFn = E.bind(k)) : (t.setTimeoutFn = setTimeout.bind(k), t.clearTimeoutFn = clearTimeout.bind(k));\n  }\n\n  var R = T;\n\n  function T(t) {\n    if (t) return function (t) {\n      for (var e in T.prototype) {\n        t[e] = T.prototype[e];\n      }\n\n      return t;\n    }(t);\n  }\n\n  T.prototype.on = T.prototype.addEventListener = function (t, e) {\n    return this._callbacks = this._callbacks || {}, (this._callbacks[\"$\" + t] = this._callbacks[\"$\" + t] || []).push(e), this;\n  }, T.prototype.once = function (t, e) {\n    function n() {\n      this.off(t, n), e.apply(this, arguments);\n    }\n\n    return n.fn = e, this.on(t, n), this;\n  }, T.prototype.off = T.prototype.removeListener = T.prototype.removeAllListeners = T.prototype.removeEventListener = function (t, e) {\n    if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;\n    var n,\n        r = this._callbacks[\"$\" + t];\n    if (!r) return this;\n    if (1 == arguments.length) return delete this._callbacks[\"$\" + t], this;\n\n    for (var o = 0; o < r.length; o++) {\n      if ((n = r[o]) === e || n.fn === e) {\n        r.splice(o, 1);\n        break;\n      }\n    }\n\n    return 0 === r.length && delete this._callbacks[\"$\" + t], this;\n  }, T.prototype.emit = function (t) {\n    this._callbacks = this._callbacks || {};\n\n    for (var e = new Array(arguments.length - 1), n = this._callbacks[\"$\" + t], r = 1; r < arguments.length; r++) {\n      e[r - 1] = arguments[r];\n    }\n\n    if (n) {\n      r = 0;\n\n      for (var o = (n = n.slice(0)).length; r < o; ++r) {\n        n[r].apply(this, e);\n      }\n    }\n\n    return this;\n  }, T.prototype.emitReserved = T.prototype.emit, T.prototype.listeners = function (t) {\n    return this._callbacks = this._callbacks || {}, this._callbacks[\"$\" + t] || [];\n  }, T.prototype.hasListeners = function (t) {\n    return !!this.listeners(t).length;\n  };\n  var C = Object.create(null);\n  C.open = \"0\", C.close = \"1\", C.ping = \"2\", C.pong = \"3\", C.message = \"4\", C.upgrade = \"5\", C.noop = \"6\";\n  var O = Object.create(null);\n  Object.keys(C).forEach(function (t) {\n    O[C[t]] = t;\n  });\n\n  for (var S = {\n    type: \"error\",\n    data: \"parser error\"\n  }, B = \"function\" == typeof Blob || \"undefined\" != typeof Blob && \"[object BlobConstructor]\" === Object.prototype.toString.call(Blob), N = \"function\" == typeof ArrayBuffer, x = function x(t, e, n) {\n    var r,\n        o = t.type,\n        i = t.data;\n    return B && i instanceof Blob ? e ? n(i) : L(i, n) : N && (i instanceof ArrayBuffer || (r = i, \"function\" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(r) : r && r.buffer instanceof ArrayBuffer)) ? e ? n(i) : L(new Blob([i]), n) : n(C[o] + (i || \"\"));\n  }, L = function L(t, e) {\n    var n = new FileReader();\n    return n.onload = function () {\n      var t = n.result.split(\",\")[1];\n      e(\"b\" + t);\n    }, n.readAsDataURL(t);\n  }, j = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", P = \"undefined\" == typeof Uint8Array ? [] : new Uint8Array(256), q = 0; q < j.length; q++) {\n    P[j.charCodeAt(q)] = q;\n  }\n\n  var D,\n      I = \"function\" == typeof ArrayBuffer,\n      F = function F(t, e) {\n    if (\"string\" != typeof t) return {\n      type: \"message\",\n      data: U(t, e)\n    };\n    var n = t.charAt(0);\n    return \"b\" === n ? {\n      type: \"message\",\n      data: M(t.substring(1), e)\n    } : O[n] ? t.length > 1 ? {\n      type: O[n],\n      data: t.substring(1)\n    } : {\n      type: O[n]\n    } : S;\n  },\n      M = function M(t, e) {\n    if (I) {\n      var n = function (t) {\n        var e,\n            n,\n            r,\n            o,\n            i,\n            s = 0.75 * t.length,\n            a = t.length,\n            c = 0;\n        \"=\" === t[t.length - 1] && (s--, \"=\" === t[t.length - 2] && s--);\n        var u = new ArrayBuffer(s),\n            h = new Uint8Array(u);\n\n        for (e = 0; e < a; e += 4) {\n          n = P[t.charCodeAt(e)], r = P[t.charCodeAt(e + 1)], o = P[t.charCodeAt(e + 2)], i = P[t.charCodeAt(e + 3)], h[c++] = n << 2 | r >> 4, h[c++] = (15 & r) << 4 | o >> 2, h[c++] = (3 & o) << 6 | 63 & i;\n        }\n\n        return u;\n      }(t);\n\n      return U(n, e);\n    }\n\n    return {\n      base64: !0,\n      data: t\n    };\n  },\n      U = function U(t, e) {\n    return \"blob\" === e && t instanceof ArrayBuffer ? new Blob([t]) : t;\n  },\n      V = String.fromCharCode(30),\n      H = function (t) {\n    i(o, t);\n    var n = h(o);\n\n    function o(t) {\n      var r;\n      return e(this, o), (r = n.call(this)).writable = !1, A(c(r), t), r.opts = t, r.query = t.query, r.readyState = \"\", r.socket = t.socket, r;\n    }\n\n    return r(o, [{\n      key: \"onError\",\n      value: function value(t, e) {\n        var n = new Error(t);\n        return n.type = \"TransportError\", n.description = e, f(s(o.prototype), \"emit\", this).call(this, \"error\", n), this;\n      }\n    }, {\n      key: \"open\",\n      value: function value() {\n        return \"closed\" !== this.readyState && \"\" !== this.readyState || (this.readyState = \"opening\", this.doOpen()), this;\n      }\n    }, {\n      key: \"close\",\n      value: function value() {\n        return \"opening\" !== this.readyState && \"open\" !== this.readyState || (this.doClose(), this.onClose()), this;\n      }\n    }, {\n      key: \"send\",\n      value: function value(t) {\n        \"open\" === this.readyState && this.write(t);\n      }\n    }, {\n      key: \"onOpen\",\n      value: function value() {\n        this.readyState = \"open\", this.writable = !0, f(s(o.prototype), \"emit\", this).call(this, \"open\");\n      }\n    }, {\n      key: \"onData\",\n      value: function value(t) {\n        var e = F(t, this.socket.binaryType);\n        this.onPacket(e);\n      }\n    }, {\n      key: \"onPacket\",\n      value: function value(t) {\n        f(s(o.prototype), \"emit\", this).call(this, \"packet\", t);\n      }\n    }, {\n      key: \"onClose\",\n      value: function value() {\n        this.readyState = \"closed\", f(s(o.prototype), \"emit\", this).call(this, \"close\");\n      }\n    }]), o;\n  }(R),\n      K = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"),\n      Y = {},\n      z = 0,\n      $ = 0;\n\n  function W(t) {\n    var e = \"\";\n\n    do {\n      e = K[t % 64] + e, t = Math.floor(t / 64);\n    } while (t > 0);\n\n    return e;\n  }\n\n  function J() {\n    var t = W(+new Date());\n    return t !== D ? (z = 0, D = t) : t + \".\" + W(z++);\n  }\n\n  for (; $ < 64; $++) {\n    Y[K[$]] = $;\n  }\n\n  J.encode = W, J.decode = function (t) {\n    var e = 0;\n\n    for ($ = 0; $ < t.length; $++) {\n      e = 64 * e + Y[t.charAt($)];\n    }\n\n    return e;\n  };\n\n  var X = J,\n      G = {\n    encode: function encode(t) {\n      var e = \"\";\n\n      for (var n in t) {\n        t.hasOwnProperty(n) && (e.length && (e += \"&\"), e += encodeURIComponent(n) + \"=\" + encodeURIComponent(t[n]));\n      }\n\n      return e;\n    },\n    decode: function decode(t) {\n      for (var e = {}, n = t.split(\"&\"), r = 0, o = n.length; r < o; r++) {\n        var i = n[r].split(\"=\");\n        e[decodeURIComponent(i[0])] = decodeURIComponent(i[1]);\n      }\n\n      return e;\n    }\n  },\n      Q = function (t) {\n    i(o, t);\n    var n = h(o);\n\n    function o() {\n      var t;\n      return e(this, o), (t = n.apply(this, arguments)).polling = !1, t;\n    }\n\n    return r(o, [{\n      key: \"name\",\n      get: function get() {\n        return \"polling\";\n      }\n    }, {\n      key: \"doOpen\",\n      value: function value() {\n        this.poll();\n      }\n    }, {\n      key: \"pause\",\n      value: function value(t) {\n        var e = this;\n        this.readyState = \"pausing\";\n\n        var n = function n() {\n          e.readyState = \"paused\", t();\n        };\n\n        if (this.polling || !this.writable) {\n          var r = 0;\n          this.polling && (r++, this.once(\"pollComplete\", function () {\n            --r || n();\n          })), this.writable || (r++, this.once(\"drain\", function () {\n            --r || n();\n          }));\n        } else n();\n      }\n    }, {\n      key: \"poll\",\n      value: function value() {\n        this.polling = !0, this.doPoll(), this.emit(\"poll\");\n      }\n    }, {\n      key: \"onData\",\n      value: function value(t) {\n        var e = this;\n        (function (t, e) {\n          for (var n = t.split(V), r = [], o = 0; o < n.length; o++) {\n            var i = F(n[o], e);\n            if (r.push(i), \"error\" === i.type) break;\n          }\n\n          return r;\n        })(t, this.socket.binaryType).forEach(function (t) {\n          if (\"opening\" === e.readyState && \"open\" === t.type && e.onOpen(), \"close\" === t.type) return e.onClose(), !1;\n          e.onPacket(t);\n        }), \"closed\" !== this.readyState && (this.polling = !1, this.emit(\"pollComplete\"), \"open\" === this.readyState && this.poll());\n      }\n    }, {\n      key: \"doClose\",\n      value: function value() {\n        var t = this,\n            e = function e() {\n          t.write([{\n            type: \"close\"\n          }]);\n        };\n\n        \"open\" === this.readyState ? e() : this.once(\"open\", e);\n      }\n    }, {\n      key: \"write\",\n      value: function value(t) {\n        var e = this;\n        this.writable = !1, function (t, e) {\n          var n = t.length,\n              r = new Array(n),\n              o = 0;\n          t.forEach(function (t, i) {\n            x(t, !1, function (t) {\n              r[i] = t, ++o === n && e(r.join(V));\n            });\n          });\n        }(t, function (t) {\n          e.doWrite(t, function () {\n            e.writable = !0, e.emit(\"drain\");\n          });\n        });\n      }\n    }, {\n      key: \"uri\",\n      value: function value() {\n        var t = this.query || {},\n            e = this.opts.secure ? \"https\" : \"http\",\n            n = \"\";\n        !1 !== this.opts.timestampRequests && (t[this.opts.timestampParam] = X()), this.supportsBinary || t.sid || (t.b64 = 1), this.opts.port && (\"https\" === e && 443 !== Number(this.opts.port) || \"http\" === e && 80 !== Number(this.opts.port)) && (n = \":\" + this.opts.port);\n        var r = G.encode(t);\n        return e + \"://\" + (-1 !== this.opts.hostname.indexOf(\":\") ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + n + this.opts.path + (r.length ? \"?\" + r : \"\");\n      }\n    }]), o;\n  }(H);\n\n  function Z() {}\n\n  var tt = null != new b({\n    xdomain: !1\n  }).responseType,\n      et = function (t) {\n    i(s, t);\n    var n = h(s);\n\n    function s(t) {\n      var r;\n\n      if (e(this, s), r = n.call(this, t), \"undefined\" != typeof location) {\n        var o = \"https:\" === location.protocol,\n            i = location.port;\n        i || (i = o ? \"443\" : \"80\"), r.xd = \"undefined\" != typeof location && t.hostname !== location.hostname || i !== t.port, r.xs = t.secure !== o;\n      }\n\n      var a = t && t.forceBase64;\n      return r.supportsBinary = tt && !a, r;\n    }\n\n    return r(s, [{\n      key: \"request\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n        return o(t, {\n          xd: this.xd,\n          xs: this.xs\n        }, this.opts), new nt(this.uri(), t);\n      }\n    }, {\n      key: \"doWrite\",\n      value: function value(t, e) {\n        var n = this,\n            r = this.request({\n          method: \"POST\",\n          data: t\n        });\n        r.on(\"success\", e), r.on(\"error\", function (t) {\n          n.onError(\"xhr post error\", t);\n        });\n      }\n    }, {\n      key: \"doPoll\",\n      value: function value() {\n        var t = this,\n            e = this.request();\n        e.on(\"data\", this.onData.bind(this)), e.on(\"error\", function (e) {\n          t.onError(\"xhr poll error\", e);\n        }), this.pollXhr = e;\n      }\n    }]), s;\n  }(Q),\n      nt = function (t) {\n    i(o, t);\n    var n = h(o);\n\n    function o(t, r) {\n      var i;\n      return e(this, o), A(c(i = n.call(this)), r), i.opts = r, i.method = r.method || \"GET\", i.uri = t, i.async = !1 !== r.async, i.data = void 0 !== r.data ? r.data : null, i.create(), i;\n    }\n\n    return r(o, [{\n      key: \"create\",\n      value: function value() {\n        var t = this,\n            e = w(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        e.xdomain = !!this.opts.xd, e.xscheme = !!this.opts.xs;\n        var n = this.xhr = new b(e);\n\n        try {\n          n.open(this.method, this.uri, this.async);\n\n          try {\n            if (this.opts.extraHeaders) for (var r in n.setDisableHeaderCheck && n.setDisableHeaderCheck(!0), this.opts.extraHeaders) {\n              this.opts.extraHeaders.hasOwnProperty(r) && n.setRequestHeader(r, this.opts.extraHeaders[r]);\n            }\n          } catch (t) {}\n\n          if (\"POST\" === this.method) try {\n            n.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n          } catch (t) {}\n\n          try {\n            n.setRequestHeader(\"Accept\", \"*/*\");\n          } catch (t) {}\n\n          \"withCredentials\" in n && (n.withCredentials = this.opts.withCredentials), this.opts.requestTimeout && (n.timeout = this.opts.requestTimeout), n.onreadystatechange = function () {\n            4 === n.readyState && (200 === n.status || 1223 === n.status ? t.onLoad() : t.setTimeoutFn(function () {\n              t.onError(\"number\" == typeof n.status ? n.status : 0);\n            }, 0));\n          }, n.send(this.data);\n        } catch (e) {\n          return void this.setTimeoutFn(function () {\n            t.onError(e);\n          }, 0);\n        }\n\n        \"undefined\" != typeof document && (this.index = o.requestsCount++, o.requests[this.index] = this);\n      }\n    }, {\n      key: \"onSuccess\",\n      value: function value() {\n        this.emit(\"success\"), this.cleanup();\n      }\n    }, {\n      key: \"onData\",\n      value: function value(t) {\n        this.emit(\"data\", t), this.onSuccess();\n      }\n    }, {\n      key: \"onError\",\n      value: function value(t) {\n        this.emit(\"error\", t), this.cleanup(!0);\n      }\n    }, {\n      key: \"cleanup\",\n      value: function value(t) {\n        if (void 0 !== this.xhr && null !== this.xhr) {\n          if (this.xhr.onreadystatechange = Z, t) try {\n            this.xhr.abort();\n          } catch (t) {}\n          \"undefined\" != typeof document && delete o.requests[this.index], this.xhr = null;\n        }\n      }\n    }, {\n      key: \"onLoad\",\n      value: function value() {\n        var t = this.xhr.responseText;\n        null !== t && this.onData(t);\n      }\n    }, {\n      key: \"abort\",\n      value: function value() {\n        this.cleanup();\n      }\n    }]), o;\n  }(R);\n\n  if (nt.requestsCount = 0, nt.requests = {}, \"undefined\" != typeof document) if (\"function\" == typeof attachEvent) attachEvent(\"onunload\", rt);else if (\"function\" == typeof addEventListener) {\n    addEventListener(\"onpagehide\" in k ? \"pagehide\" : \"unload\", rt, !1);\n  }\n\n  function rt() {\n    for (var t in nt.requests) {\n      nt.requests.hasOwnProperty(t) && nt.requests[t].abort();\n    }\n  }\n\n  var ot = \"function\" == typeof Promise && \"function\" == typeof Promise.resolve ? function (t) {\n    return Promise.resolve().then(t);\n  } : function (t, e) {\n    return e(t, 0);\n  },\n      it = k.WebSocket || k.MozWebSocket,\n      st = \"undefined\" != typeof navigator && \"string\" == typeof navigator.product && \"reactnative\" === navigator.product.toLowerCase(),\n      at = function (t) {\n    i(o, t);\n    var n = h(o);\n\n    function o(t) {\n      var r;\n      return e(this, o), (r = n.call(this, t)).supportsBinary = !t.forceBase64, r;\n    }\n\n    return r(o, [{\n      key: \"name\",\n      get: function get() {\n        return \"websocket\";\n      }\n    }, {\n      key: \"doOpen\",\n      value: function value() {\n        if (this.check()) {\n          var t = this.uri(),\n              e = this.opts.protocols,\n              n = st ? {} : w(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n          this.opts.extraHeaders && (n.headers = this.opts.extraHeaders);\n\n          try {\n            this.ws = st ? new it(t, e, n) : e ? new it(t, e) : new it(t);\n          } catch (t) {\n            return this.emit(\"error\", t);\n          }\n\n          this.ws.binaryType = this.socket.binaryType || \"arraybuffer\", this.addEventListeners();\n        }\n      }\n    }, {\n      key: \"addEventListeners\",\n      value: function value() {\n        var t = this;\n        this.ws.onopen = function () {\n          t.opts.autoUnref && t.ws._socket.unref(), t.onOpen();\n        }, this.ws.onclose = this.onClose.bind(this), this.ws.onmessage = function (e) {\n          return t.onData(e.data);\n        }, this.ws.onerror = function (e) {\n          return t.onError(\"websocket error\", e);\n        };\n      }\n    }, {\n      key: \"write\",\n      value: function value(t) {\n        var e = this;\n        this.writable = !1;\n\n        for (var n = function n(_n2) {\n          var r = t[_n2],\n              o = _n2 === t.length - 1;\n          x(r, e.supportsBinary, function (t) {\n            try {\n              e.ws.send(t);\n            } catch (t) {}\n\n            o && ot(function () {\n              e.writable = !0, e.emit(\"drain\");\n            }, e.setTimeoutFn);\n          });\n        }, r = 0; r < t.length; r++) {\n          n(r);\n        }\n      }\n    }, {\n      key: \"doClose\",\n      value: function value() {\n        void 0 !== this.ws && (this.ws.close(), this.ws = null);\n      }\n    }, {\n      key: \"uri\",\n      value: function value() {\n        var t = this.query || {},\n            e = this.opts.secure ? \"wss\" : \"ws\",\n            n = \"\";\n        this.opts.port && (\"wss\" === e && 443 !== Number(this.opts.port) || \"ws\" === e && 80 !== Number(this.opts.port)) && (n = \":\" + this.opts.port), this.opts.timestampRequests && (t[this.opts.timestampParam] = X()), this.supportsBinary || (t.b64 = 1);\n        var r = G.encode(t);\n        return e + \"://\" + (-1 !== this.opts.hostname.indexOf(\":\") ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + n + this.opts.path + (r.length ? \"?\" + r : \"\");\n      }\n    }, {\n      key: \"check\",\n      value: function value() {\n        return !(!it || \"__initialize\" in it && this.name === o.prototype.name);\n      }\n    }]), o;\n  }(H),\n      ct = {\n    websocket: at,\n    polling: et\n  },\n      ut = function (n) {\n    i(a, n);\n    var s = h(a);\n\n    function a(n) {\n      var r,\n          i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      return e(this, a), r = s.call(this), n && \"object\" === t(n) && (i = n, n = null), n ? (n = v(n), i.hostname = n.host, i.secure = \"https\" === n.protocol || \"wss\" === n.protocol, i.port = n.port, n.query && (i.query = n.query)) : i.host && (i.hostname = v(i.host).host), A(c(r), i), r.secure = null != i.secure ? i.secure : \"undefined\" != typeof location && \"https:\" === location.protocol, i.hostname && !i.port && (i.port = r.secure ? \"443\" : \"80\"), r.hostname = i.hostname || (\"undefined\" != typeof location ? location.hostname : \"localhost\"), r.port = i.port || (\"undefined\" != typeof location && location.port ? location.port : r.secure ? \"443\" : \"80\"), r.transports = i.transports || [\"polling\", \"websocket\"], r.readyState = \"\", r.writeBuffer = [], r.prevBufferLen = 0, r.opts = o({\n        path: \"/engine.io\",\n        agent: !1,\n        withCredentials: !1,\n        upgrade: !0,\n        timestampParam: \"t\",\n        rememberUpgrade: !1,\n        rejectUnauthorized: !0,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: !0\n      }, i), r.opts.path = r.opts.path.replace(/\\/$/, \"\") + \"/\", \"string\" == typeof r.opts.query && (r.opts.query = G.decode(r.opts.query)), r.id = null, r.upgrades = null, r.pingInterval = null, r.pingTimeout = null, r.pingTimeoutTimer = null, \"function\" == typeof addEventListener && (r.opts.closeOnBeforeunload && addEventListener(\"beforeunload\", function () {\n        r.transport && (r.transport.removeAllListeners(), r.transport.close());\n      }, !1), \"localhost\" !== r.hostname && (r.offlineEventListener = function () {\n        r.onClose(\"transport close\");\n      }, addEventListener(\"offline\", r.offlineEventListener, !1))), r.open(), r;\n    }\n\n    return r(a, [{\n      key: \"createTransport\",\n      value: function value(t) {\n        var e = function (t) {\n          var e = {};\n\n          for (var n in t) {\n            t.hasOwnProperty(n) && (e[n] = t[n]);\n          }\n\n          return e;\n        }(this.opts.query);\n\n        e.EIO = 4, e.transport = t, this.id && (e.sid = this.id);\n        var n = o({}, this.opts.transportOptions[t], this.opts, {\n          query: e,\n          socket: this,\n          hostname: this.hostname,\n          secure: this.secure,\n          port: this.port\n        });\n        return new ct[t](n);\n      }\n    }, {\n      key: \"open\",\n      value: function value() {\n        var t,\n            e = this;\n        if (this.opts.rememberUpgrade && a.priorWebsocketSuccess && -1 !== this.transports.indexOf(\"websocket\")) t = \"websocket\";else {\n          if (0 === this.transports.length) return void this.setTimeoutFn(function () {\n            e.emitReserved(\"error\", \"No transports available\");\n          }, 0);\n          t = this.transports[0];\n        }\n        this.readyState = \"opening\";\n\n        try {\n          t = this.createTransport(t);\n        } catch (t) {\n          return this.transports.shift(), void this.open();\n        }\n\n        t.open(), this.setTransport(t);\n      }\n    }, {\n      key: \"setTransport\",\n      value: function value(t) {\n        var e = this;\n        this.transport && this.transport.removeAllListeners(), this.transport = t, t.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", function () {\n          e.onClose(\"transport close\");\n        });\n      }\n    }, {\n      key: \"probe\",\n      value: function value(t) {\n        var e = this,\n            n = this.createTransport(t),\n            r = !1;\n        a.priorWebsocketSuccess = !1;\n\n        var o = function o() {\n          r || (n.send([{\n            type: \"ping\",\n            data: \"probe\"\n          }]), n.once(\"packet\", function (t) {\n            if (!r) if (\"pong\" === t.type && \"probe\" === t.data) {\n              if (e.upgrading = !0, e.emitReserved(\"upgrading\", n), !n) return;\n              a.priorWebsocketSuccess = \"websocket\" === n.name, e.transport.pause(function () {\n                r || \"closed\" !== e.readyState && (f(), e.setTransport(n), n.send([{\n                  type: \"upgrade\"\n                }]), e.emitReserved(\"upgrade\", n), n = null, e.upgrading = !1, e.flush());\n              });\n            } else {\n              var o = new Error(\"probe error\");\n              o.transport = n.name, e.emitReserved(\"upgradeError\", o);\n            }\n          }));\n        };\n\n        function i() {\n          r || (r = !0, f(), n.close(), n = null);\n        }\n\n        var s = function s(t) {\n          var r = new Error(\"probe error: \" + t);\n          r.transport = n.name, i(), e.emitReserved(\"upgradeError\", r);\n        };\n\n        function c() {\n          s(\"transport closed\");\n        }\n\n        function u() {\n          s(\"socket closed\");\n        }\n\n        function h(t) {\n          n && t.name !== n.name && i();\n        }\n\n        var f = function f() {\n          n.removeListener(\"open\", o), n.removeListener(\"error\", s), n.removeListener(\"close\", c), e.off(\"close\", u), e.off(\"upgrading\", h);\n        };\n\n        n.once(\"open\", o), n.once(\"error\", s), n.once(\"close\", c), this.once(\"close\", u), this.once(\"upgrading\", h), n.open();\n      }\n    }, {\n      key: \"onOpen\",\n      value: function value() {\n        if (this.readyState = \"open\", a.priorWebsocketSuccess = \"websocket\" === this.transport.name, this.emitReserved(\"open\"), this.flush(), \"open\" === this.readyState && this.opts.upgrade && this.transport.pause) for (var t = 0, e = this.upgrades.length; t < e; t++) {\n          this.probe(this.upgrades[t]);\n        }\n      }\n    }, {\n      key: \"onPacket\",\n      value: function value(t) {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) switch (this.emitReserved(\"packet\", t), this.emitReserved(\"heartbeat\"), t.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(t.data));\n            break;\n\n          case \"ping\":\n            this.resetPingTimeout(), this.sendPacket(\"pong\"), this.emitReserved(\"ping\"), this.emitReserved(\"pong\");\n            break;\n\n          case \"error\":\n            var e = new Error(\"server error\");\n            e.code = t.data, this.onError(e);\n            break;\n\n          case \"message\":\n            this.emitReserved(\"data\", t.data), this.emitReserved(\"message\", t.data);\n        }\n      }\n    }, {\n      key: \"onHandshake\",\n      value: function value(t) {\n        this.emitReserved(\"handshake\", t), this.id = t.sid, this.transport.query.sid = t.sid, this.upgrades = this.filterUpgrades(t.upgrades), this.pingInterval = t.pingInterval, this.pingTimeout = t.pingTimeout, this.onOpen(), \"closed\" !== this.readyState && this.resetPingTimeout();\n      }\n    }, {\n      key: \"resetPingTimeout\",\n      value: function value() {\n        var t = this;\n        this.clearTimeoutFn(this.pingTimeoutTimer), this.pingTimeoutTimer = this.setTimeoutFn(function () {\n          t.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout), this.opts.autoUnref && this.pingTimeoutTimer.unref();\n      }\n    }, {\n      key: \"onDrain\",\n      value: function value() {\n        this.writeBuffer.splice(0, this.prevBufferLen), this.prevBufferLen = 0, 0 === this.writeBuffer.length ? this.emitReserved(\"drain\") : this.flush();\n      }\n    }, {\n      key: \"flush\",\n      value: function value() {\n        \"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length && (this.transport.send(this.writeBuffer), this.prevBufferLen = this.writeBuffer.length, this.emitReserved(\"flush\"));\n      }\n    }, {\n      key: \"write\",\n      value: function value(t, e, n) {\n        return this.sendPacket(\"message\", t, e, n), this;\n      }\n    }, {\n      key: \"send\",\n      value: function value(t, e, n) {\n        return this.sendPacket(\"message\", t, e, n), this;\n      }\n    }, {\n      key: \"sendPacket\",\n      value: function value(t, e, n, r) {\n        if (\"function\" == typeof e && (r = e, e = void 0), \"function\" == typeof n && (r = n, n = null), \"closing\" !== this.readyState && \"closed\" !== this.readyState) {\n          (n = n || {}).compress = !1 !== n.compress;\n          var o = {\n            type: t,\n            data: e,\n            options: n\n          };\n          this.emitReserved(\"packetCreate\", o), this.writeBuffer.push(o), r && this.once(\"flush\", r), this.flush();\n        }\n      }\n    }, {\n      key: \"close\",\n      value: function value() {\n        var t = this,\n            e = function e() {\n          t.onClose(\"forced close\"), t.transport.close();\n        },\n            n = function n() {\n          t.off(\"upgrade\", n), t.off(\"upgradeError\", n), e();\n        },\n            r = function r() {\n          t.once(\"upgrade\", n), t.once(\"upgradeError\", n);\n        };\n\n        return \"opening\" !== this.readyState && \"open\" !== this.readyState || (this.readyState = \"closing\", this.writeBuffer.length ? this.once(\"drain\", function () {\n          t.upgrading ? r() : e();\n        }) : this.upgrading ? r() : e()), this;\n      }\n    }, {\n      key: \"onError\",\n      value: function value(t) {\n        a.priorWebsocketSuccess = !1, this.emitReserved(\"error\", t), this.onClose(\"transport error\", t);\n      }\n    }, {\n      key: \"onClose\",\n      value: function value(t, e) {\n        \"opening\" !== this.readyState && \"open\" !== this.readyState && \"closing\" !== this.readyState || (this.clearTimeoutFn(this.pingTimeoutTimer), this.transport.removeAllListeners(\"close\"), this.transport.close(), this.transport.removeAllListeners(), \"function\" == typeof removeEventListener && removeEventListener(\"offline\", this.offlineEventListener, !1), this.readyState = \"closed\", this.id = null, this.emitReserved(\"close\", t, e), this.writeBuffer = [], this.prevBufferLen = 0);\n      }\n    }, {\n      key: \"filterUpgrades\",\n      value: function value(t) {\n        for (var e = [], n = 0, r = t.length; n < r; n++) {\n          ~this.transports.indexOf(t[n]) && e.push(t[n]);\n        }\n\n        return e;\n      }\n    }]), a;\n  }(R);\n\n  ut.protocol = 4;\n  var ht = \"function\" == typeof ArrayBuffer,\n      ft = Object.prototype.toString,\n      lt = \"function\" == typeof Blob || \"undefined\" != typeof Blob && \"[object BlobConstructor]\" === ft.call(Blob),\n      pt = \"function\" == typeof File || \"undefined\" != typeof File && \"[object FileConstructor]\" === ft.call(File);\n\n  function dt(t) {\n    return ht && (t instanceof ArrayBuffer || function (t) {\n      return \"function\" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(t) : t.buffer instanceof ArrayBuffer;\n    }(t)) || lt && t instanceof Blob || pt && t instanceof File;\n  }\n\n  function yt(e, n) {\n    if (!e || \"object\" !== t(e)) return !1;\n\n    if (Array.isArray(e)) {\n      for (var r = 0, o = e.length; r < o; r++) {\n        if (yt(e[r])) return !0;\n      }\n\n      return !1;\n    }\n\n    if (dt(e)) return !0;\n    if (e.toJSON && \"function\" == typeof e.toJSON && 1 === arguments.length) return yt(e.toJSON(), !0);\n\n    for (var i in e) {\n      if (Object.prototype.hasOwnProperty.call(e, i) && yt(e[i])) return !0;\n    }\n\n    return !1;\n  }\n\n  function vt(t) {\n    var e = [],\n        n = t.data,\n        r = t;\n    return r.data = mt(n, e), r.attachments = e.length, {\n      packet: r,\n      buffers: e\n    };\n  }\n\n  function mt(e, n) {\n    if (!e) return e;\n\n    if (dt(e)) {\n      var r = {\n        _placeholder: !0,\n        num: n.length\n      };\n      return n.push(e), r;\n    }\n\n    if (Array.isArray(e)) {\n      for (var o = new Array(e.length), i = 0; i < e.length; i++) {\n        o[i] = mt(e[i], n);\n      }\n\n      return o;\n    }\n\n    if (\"object\" === t(e) && !(e instanceof Date)) {\n      var s = {};\n\n      for (var a in e) {\n        e.hasOwnProperty(a) && (s[a] = mt(e[a], n));\n      }\n\n      return s;\n    }\n\n    return e;\n  }\n\n  function gt(t, e) {\n    return t.data = kt(t.data, e), t.attachments = void 0, t;\n  }\n\n  function kt(e, n) {\n    if (!e) return e;\n    if (e && e._placeholder) return n[e.num];\n    if (Array.isArray(e)) for (var r = 0; r < e.length; r++) {\n      e[r] = kt(e[r], n);\n    } else if (\"object\" === t(e)) for (var o in e) {\n      e.hasOwnProperty(o) && (e[o] = kt(e[o], n));\n    }\n    return e;\n  }\n\n  var bt;\n  !function (t) {\n    t[t.CONNECT = 0] = \"CONNECT\", t[t.DISCONNECT = 1] = \"DISCONNECT\", t[t.EVENT = 2] = \"EVENT\", t[t.ACK = 3] = \"ACK\", t[t.CONNECT_ERROR = 4] = \"CONNECT_ERROR\", t[t.BINARY_EVENT = 5] = \"BINARY_EVENT\", t[t.BINARY_ACK = 6] = \"BINARY_ACK\";\n  }(bt || (bt = {}));\n\n  var wt = function () {\n    function t() {\n      e(this, t);\n    }\n\n    return r(t, [{\n      key: \"encode\",\n      value: function value(t) {\n        return t.type !== bt.EVENT && t.type !== bt.ACK || !yt(t) ? [this.encodeAsString(t)] : (t.type = t.type === bt.EVENT ? bt.BINARY_EVENT : bt.BINARY_ACK, this.encodeAsBinary(t));\n      }\n    }, {\n      key: \"encodeAsString\",\n      value: function value(t) {\n        var e = \"\" + t.type;\n        return t.type !== bt.BINARY_EVENT && t.type !== bt.BINARY_ACK || (e += t.attachments + \"-\"), t.nsp && \"/\" !== t.nsp && (e += t.nsp + \",\"), null != t.id && (e += t.id), null != t.data && (e += JSON.stringify(t.data)), e;\n      }\n    }, {\n      key: \"encodeAsBinary\",\n      value: function value(t) {\n        var e = vt(t),\n            n = this.encodeAsString(e.packet),\n            r = e.buffers;\n        return r.unshift(n), r;\n      }\n    }]), t;\n  }(),\n      _t = function (n) {\n    i(a, n);\n    var o = h(a);\n\n    function a() {\n      return e(this, a), o.call(this);\n    }\n\n    return r(a, [{\n      key: \"add\",\n      value: function value(t) {\n        var e;\n        if (\"string\" == typeof t) (e = this.decodeString(t)).type === bt.BINARY_EVENT || e.type === bt.BINARY_ACK ? (this.reconstructor = new Et(e), 0 === e.attachments && f(s(a.prototype), \"emitReserved\", this).call(this, \"decoded\", e)) : f(s(a.prototype), \"emitReserved\", this).call(this, \"decoded\", e);else {\n          if (!dt(t) && !t.base64) throw new Error(\"Unknown type: \" + t);\n          if (!this.reconstructor) throw new Error(\"got binary data when not reconstructing a packet\");\n          (e = this.reconstructor.takeBinaryData(t)) && (this.reconstructor = null, f(s(a.prototype), \"emitReserved\", this).call(this, \"decoded\", e));\n        }\n      }\n    }, {\n      key: \"decodeString\",\n      value: function value(t) {\n        var e = 0,\n            n = {\n          type: Number(t.charAt(0))\n        };\n        if (void 0 === bt[n.type]) throw new Error(\"unknown packet type \" + n.type);\n\n        if (n.type === bt.BINARY_EVENT || n.type === bt.BINARY_ACK) {\n          for (var r = e + 1; \"-\" !== t.charAt(++e) && e != t.length;) {\n            ;\n          }\n\n          var o = t.substring(r, e);\n          if (o != Number(o) || \"-\" !== t.charAt(e)) throw new Error(\"Illegal attachments\");\n          n.attachments = Number(o);\n        }\n\n        if (\"/\" === t.charAt(e + 1)) {\n          for (var i = e + 1; ++e;) {\n            if (\",\" === t.charAt(e)) break;\n            if (e === t.length) break;\n          }\n\n          n.nsp = t.substring(i, e);\n        } else n.nsp = \"/\";\n\n        var s = t.charAt(e + 1);\n\n        if (\"\" !== s && Number(s) == s) {\n          for (var c = e + 1; ++e;) {\n            var u = t.charAt(e);\n\n            if (null == u || Number(u) != u) {\n              --e;\n              break;\n            }\n\n            if (e === t.length) break;\n          }\n\n          n.id = Number(t.substring(c, e + 1));\n        }\n\n        if (t.charAt(++e)) {\n          var h = function (t) {\n            try {\n              return JSON.parse(t);\n            } catch (t) {\n              return !1;\n            }\n          }(t.substr(e));\n\n          if (!a.isPayloadValid(n.type, h)) throw new Error(\"invalid payload\");\n          n.data = h;\n        }\n\n        return n;\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        this.reconstructor && this.reconstructor.finishedReconstruction();\n      }\n    }], [{\n      key: \"isPayloadValid\",\n      value: function value(e, n) {\n        switch (e) {\n          case bt.CONNECT:\n            return \"object\" === t(n);\n\n          case bt.DISCONNECT:\n            return void 0 === n;\n\n          case bt.CONNECT_ERROR:\n            return \"string\" == typeof n || \"object\" === t(n);\n\n          case bt.EVENT:\n          case bt.BINARY_EVENT:\n            return Array.isArray(n) && n.length > 0;\n\n          case bt.ACK:\n          case bt.BINARY_ACK:\n            return Array.isArray(n);\n        }\n      }\n    }]), a;\n  }(R);\n\n  var Et = function () {\n    function t(n) {\n      e(this, t), this.packet = n, this.buffers = [], this.reconPack = n;\n    }\n\n    return r(t, [{\n      key: \"takeBinaryData\",\n      value: function value(t) {\n        if (this.buffers.push(t), this.buffers.length === this.reconPack.attachments) {\n          var e = gt(this.reconPack, this.buffers);\n          return this.finishedReconstruction(), e;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"finishedReconstruction\",\n      value: function value() {\n        this.reconPack = null, this.buffers = [];\n      }\n    }]), t;\n  }(),\n      At = Object.freeze({\n    __proto__: null,\n    protocol: 5,\n\n    get PacketType() {\n      return bt;\n    },\n\n    Encoder: wt,\n    Decoder: _t\n  });\n\n  function Rt(t, e, n) {\n    return t.on(e, n), function () {\n      t.off(e, n);\n    };\n  }\n\n  var Tt = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    newListener: 1,\n    removeListener: 1\n  }),\n      Ct = function (t) {\n    i(o, t);\n    var n = h(o);\n\n    function o(t, r, i) {\n      var s;\n      return e(this, o), (s = n.call(this)).connected = !1, s.disconnected = !0, s.receiveBuffer = [], s.sendBuffer = [], s.ids = 0, s.acks = {}, s.flags = {}, s.io = t, s.nsp = r, i && i.auth && (s.auth = i.auth), s.io._autoConnect && s.open(), s;\n    }\n\n    return r(o, [{\n      key: \"subEvents\",\n      value: function value() {\n        if (!this.subs) {\n          var t = this.io;\n          this.subs = [Rt(t, \"open\", this.onopen.bind(this)), Rt(t, \"packet\", this.onpacket.bind(this)), Rt(t, \"error\", this.onerror.bind(this)), Rt(t, \"close\", this.onclose.bind(this))];\n        }\n      }\n    }, {\n      key: \"active\",\n      get: function get() {\n        return !!this.subs;\n      }\n    }, {\n      key: \"connect\",\n      value: function value() {\n        return this.connected || (this.subEvents(), this.io._reconnecting || this.io.open(), \"open\" === this.io._readyState && this.onopen()), this;\n      }\n    }, {\n      key: \"open\",\n      value: function value() {\n        return this.connect();\n      }\n    }, {\n      key: \"send\",\n      value: function value() {\n        for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++) {\n          e[n] = arguments[n];\n        }\n\n        return e.unshift(\"message\"), this.emit.apply(this, e), this;\n      }\n    }, {\n      key: \"emit\",\n      value: function value(t) {\n        if (Tt.hasOwnProperty(t)) throw new Error('\"' + t + '\" is a reserved event name');\n\n        for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++) {\n          n[r - 1] = arguments[r];\n        }\n\n        n.unshift(t);\n        var o = {\n          type: bt.EVENT,\n          data: n,\n          options: {}\n        };\n\n        if (o.options.compress = !1 !== this.flags.compress, \"function\" == typeof n[n.length - 1]) {\n          var i = this.ids++,\n              s = n.pop();\n          this._registerAckCallback(i, s), o.id = i;\n        }\n\n        var a = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable,\n            c = this.flags[\"volatile\"] && (!a || !this.connected);\n        return c || (this.connected ? this.packet(o) : this.sendBuffer.push(o)), this.flags = {}, this;\n      }\n    }, {\n      key: \"_registerAckCallback\",\n      value: function value(t, e) {\n        var n = this,\n            r = this.flags.timeout;\n\n        if (void 0 !== r) {\n          var o = this.io.setTimeoutFn(function () {\n            delete n.acks[t];\n\n            for (var r = 0; r < n.sendBuffer.length; r++) {\n              n.sendBuffer[r].id === t && n.sendBuffer.splice(r, 1);\n            }\n\n            e.call(n, new Error(\"operation has timed out\"));\n          }, r);\n\n          this.acks[t] = function () {\n            n.io.clearTimeoutFn(o);\n\n            for (var t = arguments.length, r = new Array(t), i = 0; i < t; i++) {\n              r[i] = arguments[i];\n            }\n\n            e.apply(n, [null].concat(r));\n          };\n        } else this.acks[t] = e;\n      }\n    }, {\n      key: \"packet\",\n      value: function value(t) {\n        t.nsp = this.nsp, this.io._packet(t);\n      }\n    }, {\n      key: \"onopen\",\n      value: function value() {\n        var t = this;\n        \"function\" == typeof this.auth ? this.auth(function (e) {\n          t.packet({\n            type: bt.CONNECT,\n            data: e\n          });\n        }) : this.packet({\n          type: bt.CONNECT,\n          data: this.auth\n        });\n      }\n    }, {\n      key: \"onerror\",\n      value: function value(t) {\n        this.connected || this.emitReserved(\"connect_error\", t);\n      }\n    }, {\n      key: \"onclose\",\n      value: function value(t) {\n        this.connected = !1, this.disconnected = !0, delete this.id, this.emitReserved(\"disconnect\", t);\n      }\n    }, {\n      key: \"onpacket\",\n      value: function value(t) {\n        if (t.nsp === this.nsp) switch (t.type) {\n          case bt.CONNECT:\n            if (t.data && t.data.sid) {\n              var e = t.data.sid;\n              this.onconnect(e);\n            } else this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n\n            break;\n\n          case bt.EVENT:\n          case bt.BINARY_EVENT:\n            this.onevent(t);\n            break;\n\n          case bt.ACK:\n          case bt.BINARY_ACK:\n            this.onack(t);\n            break;\n\n          case bt.DISCONNECT:\n            this.ondisconnect();\n            break;\n\n          case bt.CONNECT_ERROR:\n            this.destroy();\n            var n = new Error(t.data.message);\n            n.data = t.data.data, this.emitReserved(\"connect_error\", n);\n        }\n      }\n    }, {\n      key: \"onevent\",\n      value: function value(t) {\n        var e = t.data || [];\n        null != t.id && e.push(this.ack(t.id)), this.connected ? this.emitEvent(e) : this.receiveBuffer.push(Object.freeze(e));\n      }\n    }, {\n      key: \"emitEvent\",\n      value: function value(t) {\n        if (this._anyListeners && this._anyListeners.length) {\n          var e,\n              n = p(this._anyListeners.slice());\n\n          try {\n            for (n.s(); !(e = n.n()).done;) {\n              e.value.apply(this, t);\n            }\n          } catch (t) {\n            n.e(t);\n          } finally {\n            n.f();\n          }\n        }\n\n        f(s(o.prototype), \"emit\", this).apply(this, t);\n      }\n    }, {\n      key: \"ack\",\n      value: function value(t) {\n        var e = this,\n            n = !1;\n        return function () {\n          if (!n) {\n            n = !0;\n\n            for (var r = arguments.length, o = new Array(r), i = 0; i < r; i++) {\n              o[i] = arguments[i];\n            }\n\n            e.packet({\n              type: bt.ACK,\n              id: t,\n              data: o\n            });\n          }\n        };\n      }\n    }, {\n      key: \"onack\",\n      value: function value(t) {\n        var e = this.acks[t.id];\n        \"function\" == typeof e && (e.apply(this, t.data), delete this.acks[t.id]);\n      }\n    }, {\n      key: \"onconnect\",\n      value: function value(t) {\n        this.id = t, this.connected = !0, this.disconnected = !1, this.emitBuffered(), this.emitReserved(\"connect\");\n      }\n    }, {\n      key: \"emitBuffered\",\n      value: function value() {\n        var t = this;\n        this.receiveBuffer.forEach(function (e) {\n          return t.emitEvent(e);\n        }), this.receiveBuffer = [], this.sendBuffer.forEach(function (e) {\n          return t.packet(e);\n        }), this.sendBuffer = [];\n      }\n    }, {\n      key: \"ondisconnect\",\n      value: function value() {\n        this.destroy(), this.onclose(\"io server disconnect\");\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        this.subs && (this.subs.forEach(function (t) {\n          return t();\n        }), this.subs = void 0), this.io._destroy(this);\n      }\n    }, {\n      key: \"disconnect\",\n      value: function value() {\n        return this.connected && this.packet({\n          type: bt.DISCONNECT\n        }), this.destroy(), this.connected && this.onclose(\"io client disconnect\"), this;\n      }\n    }, {\n      key: \"close\",\n      value: function value() {\n        return this.disconnect();\n      }\n    }, {\n      key: \"compress\",\n      value: function value(t) {\n        return this.flags.compress = t, this;\n      }\n    }, {\n      key: \"volatile\",\n      get: function get() {\n        return this.flags[\"volatile\"] = !0, this;\n      }\n    }, {\n      key: \"timeout\",\n      value: function value(t) {\n        return this.flags.timeout = t, this;\n      }\n    }, {\n      key: \"onAny\",\n      value: function value(t) {\n        return this._anyListeners = this._anyListeners || [], this._anyListeners.push(t), this;\n      }\n    }, {\n      key: \"prependAny\",\n      value: function value(t) {\n        return this._anyListeners = this._anyListeners || [], this._anyListeners.unshift(t), this;\n      }\n    }, {\n      key: \"offAny\",\n      value: function value(t) {\n        if (!this._anyListeners) return this;\n\n        if (t) {\n          for (var e = this._anyListeners, n = 0; n < e.length; n++) {\n            if (t === e[n]) return e.splice(n, 1), this;\n          }\n        } else this._anyListeners = [];\n\n        return this;\n      }\n    }, {\n      key: \"listenersAny\",\n      value: function value() {\n        return this._anyListeners || [];\n      }\n    }]), o;\n  }(R),\n      Ot = St;\n\n  function St(t) {\n    t = t || {}, this.ms = t.min || 100, this.max = t.max || 1e4, this.factor = t.factor || 2, this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0, this.attempts = 0;\n  }\n\n  St.prototype.duration = function () {\n    var t = this.ms * Math.pow(this.factor, this.attempts++);\n\n    if (this.jitter) {\n      var e = Math.random(),\n          n = Math.floor(e * this.jitter * t);\n      t = 0 == (1 & Math.floor(10 * e)) ? t - n : t + n;\n    }\n\n    return 0 | Math.min(t, this.max);\n  }, St.prototype.reset = function () {\n    this.attempts = 0;\n  }, St.prototype.setMin = function (t) {\n    this.ms = t;\n  }, St.prototype.setMax = function (t) {\n    this.max = t;\n  }, St.prototype.setJitter = function (t) {\n    this.jitter = t;\n  };\n\n  var Bt = function (n) {\n    i(s, n);\n    var o = h(s);\n\n    function s(n, r) {\n      var i, a;\n      e(this, s), (i = o.call(this)).nsps = {}, i.subs = [], n && \"object\" === t(n) && (r = n, n = void 0), (r = r || {}).path = r.path || \"/socket.io\", i.opts = r, A(c(i), r), i.reconnection(!1 !== r.reconnection), i.reconnectionAttempts(r.reconnectionAttempts || 1 / 0), i.reconnectionDelay(r.reconnectionDelay || 1e3), i.reconnectionDelayMax(r.reconnectionDelayMax || 5e3), i.randomizationFactor(null !== (a = r.randomizationFactor) && void 0 !== a ? a : 0.5), i.backoff = new Ot({\n        min: i.reconnectionDelay(),\n        max: i.reconnectionDelayMax(),\n        jitter: i.randomizationFactor()\n      }), i.timeout(null == r.timeout ? 2e4 : r.timeout), i._readyState = \"closed\", i.uri = n;\n      var u = r.parser || At;\n      return i.encoder = new u.Encoder(), i.decoder = new u.Decoder(), i._autoConnect = !1 !== r.autoConnect, i._autoConnect && i.open(), i;\n    }\n\n    return r(s, [{\n      key: \"reconnection\",\n      value: function value(t) {\n        return arguments.length ? (this._reconnection = !!t, this) : this._reconnection;\n      }\n    }, {\n      key: \"reconnectionAttempts\",\n      value: function value(t) {\n        return void 0 === t ? this._reconnectionAttempts : (this._reconnectionAttempts = t, this);\n      }\n    }, {\n      key: \"reconnectionDelay\",\n      value: function value(t) {\n        var e;\n        return void 0 === t ? this._reconnectionDelay : (this._reconnectionDelay = t, null === (e = this.backoff) || void 0 === e || e.setMin(t), this);\n      }\n    }, {\n      key: \"randomizationFactor\",\n      value: function value(t) {\n        var e;\n        return void 0 === t ? this._randomizationFactor : (this._randomizationFactor = t, null === (e = this.backoff) || void 0 === e || e.setJitter(t), this);\n      }\n    }, {\n      key: \"reconnectionDelayMax\",\n      value: function value(t) {\n        var e;\n        return void 0 === t ? this._reconnectionDelayMax : (this._reconnectionDelayMax = t, null === (e = this.backoff) || void 0 === e || e.setMax(t), this);\n      }\n    }, {\n      key: \"timeout\",\n      value: function value(t) {\n        return arguments.length ? (this._timeout = t, this) : this._timeout;\n      }\n    }, {\n      key: \"maybeReconnectOnOpen\",\n      value: function value() {\n        !this._reconnecting && this._reconnection && 0 === this.backoff.attempts && this.reconnect();\n      }\n    }, {\n      key: \"open\",\n      value: function value(t) {\n        var e = this;\n        if (~this._readyState.indexOf(\"open\")) return this;\n        this.engine = new ut(this.uri, this.opts);\n        var n = this.engine,\n            r = this;\n        this._readyState = \"opening\", this.skipReconnect = !1;\n        var o = Rt(n, \"open\", function () {\n          r.onopen(), t && t();\n        }),\n            i = Rt(n, \"error\", function (n) {\n          r.cleanup(), r._readyState = \"closed\", e.emitReserved(\"error\", n), t ? t(n) : r.maybeReconnectOnOpen();\n        });\n\n        if (!1 !== this._timeout) {\n          var s = this._timeout;\n          0 === s && o();\n          var a = this.setTimeoutFn(function () {\n            o(), n.close(), n.emit(\"error\", new Error(\"timeout\"));\n          }, s);\n          this.opts.autoUnref && a.unref(), this.subs.push(function () {\n            clearTimeout(a);\n          });\n        }\n\n        return this.subs.push(o), this.subs.push(i), this;\n      }\n    }, {\n      key: \"connect\",\n      value: function value(t) {\n        return this.open(t);\n      }\n    }, {\n      key: \"onopen\",\n      value: function value() {\n        this.cleanup(), this._readyState = \"open\", this.emitReserved(\"open\");\n        var t = this.engine;\n        this.subs.push(Rt(t, \"ping\", this.onping.bind(this)), Rt(t, \"data\", this.ondata.bind(this)), Rt(t, \"error\", this.onerror.bind(this)), Rt(t, \"close\", this.onclose.bind(this)), Rt(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n      }\n    }, {\n      key: \"onping\",\n      value: function value() {\n        this.emitReserved(\"ping\");\n      }\n    }, {\n      key: \"ondata\",\n      value: function value(t) {\n        this.decoder.add(t);\n      }\n    }, {\n      key: \"ondecoded\",\n      value: function value(t) {\n        this.emitReserved(\"packet\", t);\n      }\n    }, {\n      key: \"onerror\",\n      value: function value(t) {\n        this.emitReserved(\"error\", t);\n      }\n    }, {\n      key: \"socket\",\n      value: function value(t, e) {\n        var n = this.nsps[t];\n        return n || (n = new Ct(this, t, e), this.nsps[t] = n), n;\n      }\n    }, {\n      key: \"_destroy\",\n      value: function value(t) {\n        for (var e = 0, n = Object.keys(this.nsps); e < n.length; e++) {\n          var r = n[e];\n          if (this.nsps[r].active) return;\n        }\n\n        this._close();\n      }\n    }, {\n      key: \"_packet\",\n      value: function value(t) {\n        for (var e = this.encoder.encode(t), n = 0; n < e.length; n++) {\n          this.engine.write(e[n], t.options);\n        }\n      }\n    }, {\n      key: \"cleanup\",\n      value: function value() {\n        this.subs.forEach(function (t) {\n          return t();\n        }), this.subs.length = 0, this.decoder.destroy();\n      }\n    }, {\n      key: \"_close\",\n      value: function value() {\n        this.skipReconnect = !0, this._reconnecting = !1, this.onclose(\"forced close\"), this.engine && this.engine.close();\n      }\n    }, {\n      key: \"disconnect\",\n      value: function value() {\n        return this._close();\n      }\n    }, {\n      key: \"onclose\",\n      value: function value(t) {\n        this.cleanup(), this.backoff.reset(), this._readyState = \"closed\", this.emitReserved(\"close\", t), this._reconnection && !this.skipReconnect && this.reconnect();\n      }\n    }, {\n      key: \"reconnect\",\n      value: function value() {\n        var t = this;\n        if (this._reconnecting || this.skipReconnect) return this;\n        var e = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) this.backoff.reset(), this.emitReserved(\"reconnect_failed\"), this._reconnecting = !1;else {\n          var n = this.backoff.duration();\n          this._reconnecting = !0;\n          var r = this.setTimeoutFn(function () {\n            e.skipReconnect || (t.emitReserved(\"reconnect_attempt\", e.backoff.attempts), e.skipReconnect || e.open(function (n) {\n              n ? (e._reconnecting = !1, e.reconnect(), t.emitReserved(\"reconnect_error\", n)) : e.onreconnect();\n            }));\n          }, n);\n          this.opts.autoUnref && r.unref(), this.subs.push(function () {\n            clearTimeout(r);\n          });\n        }\n      }\n    }, {\n      key: \"onreconnect\",\n      value: function value() {\n        var t = this.backoff.attempts;\n        this._reconnecting = !1, this.backoff.reset(), this.emitReserved(\"reconnect\", t);\n      }\n    }]), s;\n  }(R),\n      Nt = {};\n\n  function xt(e, n) {\n    \"object\" === t(e) && (n = e, e = void 0);\n\n    var r,\n        o = function (t) {\n      var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\",\n          n = arguments.length > 2 ? arguments[2] : void 0,\n          r = t;\n      n = n || \"undefined\" != typeof location && location, null == t && (t = n.protocol + \"//\" + n.host), \"string\" == typeof t && (\"/\" === t.charAt(0) && (t = \"/\" === t.charAt(1) ? n.protocol + t : n.host + t), /^(https?|wss?):\\/\\//.test(t) || (t = void 0 !== n ? n.protocol + \"//\" + t : \"https://\" + t), r = v(t)), r.port || (/^(http|ws)$/.test(r.protocol) ? r.port = \"80\" : /^(http|ws)s$/.test(r.protocol) && (r.port = \"443\")), r.path = r.path || \"/\";\n      var o = -1 !== r.host.indexOf(\":\") ? \"[\" + r.host + \"]\" : r.host;\n      return r.id = r.protocol + \"://\" + o + \":\" + r.port + e, r.href = r.protocol + \"://\" + o + (n && n.port === r.port ? \"\" : \":\" + r.port), r;\n    }(e, (n = n || {}).path || \"/socket.io\"),\n        i = o.source,\n        s = o.id,\n        a = o.path,\n        c = Nt[s] && a in Nt[s].nsps;\n\n    return n.forceNew || n[\"force new connection\"] || !1 === n.multiplex || c ? r = new Bt(i, n) : (Nt[s] || (Nt[s] = new Bt(i, n)), r = Nt[s]), o.query && !n.query && (n.query = o.queryKey), r.socket(o.path, n);\n  }\n\n  return o(xt, {\n    Manager: Bt,\n    Socket: Ct,\n    io: xt,\n    connect: xt\n  }), xt;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFELEtBQU9BLENBQUMsQ0FBQzhaLFNBQXBELElBQWlFdlksQ0FBakUsR0FBc0VyQixDQUFDLEdBQUcsSUFBSTRYLEVBQUosQ0FBTy9XLENBQVAsRUFBVWYsQ0FBVixDQUExRSxJQUEyRjBaLEVBQUUsQ0FBQ3ZZLENBQUQsQ0FBRixLQUFVdVksRUFBRSxDQUFDdlksQ0FBRCxDQUFGLEdBQVEsSUFBSTJXLEVBQUosQ0FBTy9XLENBQVAsRUFBVWYsQ0FBVixDQUFsQixHQUFrQ0UsQ0FBQyxHQUFHd1osRUFBRSxDQUFDdlksQ0FBRCxDQUFuSSxHQUEwSVYsQ0FBQyxDQUFDdUQsS0FBRixJQUFXLENBQUNoRSxDQUFDLENBQUNnRSxLQUFkLEtBQXdCaEUsQ0FBQyxDQUFDZ0UsS0FBRixHQUFVdkQsQ0FBQyxDQUFDc0QsUUFBcEMsQ0FBMUksRUFBeUw3RCxDQUFDLENBQUNnSixNQUFGLENBQVN6SSxDQUFDLENBQUNxRCxJQUFYLEVBQWlCOUQsQ0FBakIsQ0FBaE07QUFDSDs7QUFDRCxTQUFPUyxDQUFDLENBQUNrWixFQUFELEVBQUs7QUFBRUksSUFBQUEsT0FBTyxFQUFFakMsRUFBWDtBQUFla0MsSUFBQUEsTUFBTSxFQUFFOUUsRUFBdkI7QUFBMkJ4VixJQUFBQSxFQUFFLEVBQUVpYSxFQUEvQjtBQUFtQzlFLElBQUFBLE9BQU8sRUFBRThFO0FBQTVDLEdBQUwsQ0FBRCxFQUF5REEsRUFBaEU7QUFDSCxDQWg5REEsQ0FBRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9zb2NrZXQuaW8uanM/NThjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIFNvY2tldC5JTyB2NC40LjBcbiAqIChjKSAyMDE0LTIwMjEgR3VpbGxlcm1vIFJhdWNoXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbiEoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICBcIm9iamVjdFwiID09IHR5cGVvZiBleHBvcnRzICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIG1vZHVsZSA/IChtb2R1bGUuZXhwb3J0cyA9IGUoKSkgOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGUpIDogKCh0ID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZ2xvYmFsVGhpcyA/IGdsb2JhbFRoaXMgOiB0IHx8IHNlbGYpLmlvID0gZSgpKTtcbn0pKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBmdW5jdGlvbiB0KGUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0ID1cbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIHQuY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiB0ICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiB0O1xuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdChlKVxuICAgICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlKHQsIGUpIHtcbiAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIGUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBuKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBlLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICB2YXIgciA9IGVbbl07XG4gICAgICAgICAgICAoci5lbnVtZXJhYmxlID0gci5lbnVtZXJhYmxlIHx8ICExKSwgKHIuY29uZmlndXJhYmxlID0gITApLCBcInZhbHVlXCIgaW4gciAmJiAoci53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIHIua2V5LCByKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByKHQsIGUsIHIpIHtcbiAgICAgICAgcmV0dXJuIGUgJiYgbih0LnByb3RvdHlwZSwgZSksIHIgJiYgbih0LCByKSwgdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbygpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChvID1cbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduIHx8XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gYXJndW1lbnRzW2VdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciBpbiBuKSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobiwgcikgJiYgKHRbcl0gPSBuW3JdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG8uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpKHQsIGUpIHtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgICAgICh0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogdCwgd3JpdGFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwIH0gfSkpLCBlICYmIGEodCwgZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHModCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2ZcbiAgICAgICAgICAgICAgICA/IE9iamVjdC5nZXRQcm90b3R5cGVPZlxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzKHQpXG4gICAgICAgICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGEodCwgZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGEgPVxuICAgICAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodC5fX3Byb3RvX18gPSBlKSwgdDtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGEodCwgZSlcbiAgICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYyh0KSB7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IHQpIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHUodCwgZSkge1xuICAgICAgICBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTtcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICAgICAgICByZXR1cm4gYyh0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaCh0KSB7XG4gICAgICAgIHZhciBlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBSZWZsZWN0IHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuICExO1xuICAgICAgICAgICAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiAhMTtcbiAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFByb3h5KSByZXR1cm4gITA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSksICEwO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgIHIgPSBzKHQpO1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IHModGhpcykuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAgICAgbiA9IFJlZmxlY3QuY29uc3RydWN0KHIsIGFyZ3VtZW50cywgbyk7XG4gICAgICAgICAgICB9IGVsc2UgbiA9IHIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiB1KHRoaXMsIG4pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBmKHQsIGUsIG4pIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChmID1cbiAgICAgICAgICAgICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBSZWZsZWN0ICYmIFJlZmxlY3QuZ2V0XG4gICAgICAgICAgICAgICAgICAgID8gUmVmbGVjdC5nZXRcbiAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAodCwgZSwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IChmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgZSkgJiYgbnVsbCAhPT0gKHQgPSBzKHQpKTsgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSh0LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvLmdldCA/IG8uZ2V0LmNhbGwobikgOiBvLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmKHQsIGUsIG4gfHwgdClcbiAgICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbCh0LCBlKSB7XG4gICAgICAgIChudWxsID09IGUgfHwgZSA+IHQubGVuZ3RoKSAmJiAoZSA9IHQubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSBuZXcgQXJyYXkoZSk7IG4gPCBlOyBuKyspIHJbbl0gPSB0W25dO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcCh0LCBlKSB7XG4gICAgICAgIHZhciBuID0gKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiB0W1N5bWJvbC5pdGVyYXRvcl0pIHx8IHRbXCJAQGl0ZXJhdG9yXCJdO1xuICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHQpIHx8XG4gICAgICAgICAgICAgICAgKG4gPSAoZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiB0KSByZXR1cm4gbCh0LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpLnNsaWNlKDgsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk9iamVjdFwiID09PSBuICYmIHQuY29uc3RydWN0b3IgJiYgKG4gPSB0LmNvbnN0cnVjdG9yLm5hbWUpLCBcIk1hcFwiID09PSBuIHx8IFwiU2V0XCIgPT09IG4gPyBBcnJheS5mcm9tKHQpIDogXCJBcmd1bWVudHNcIiA9PT0gbiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSA/IGwodCwgZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSh0KSkgfHxcbiAgICAgICAgICAgICAgICAoZSAmJiB0ICYmIFwibnVtYmVyXCIgPT0gdHlwZW9mIHQubGVuZ3RoKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbiAmJiAodCA9IG4pO1xuICAgICAgICAgICAgICAgIHZhciByID0gMCxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHM6IG8sXG4gICAgICAgICAgICAgICAgICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID49IHQubGVuZ3RoID8geyBkb25lOiAhMCB9IDogeyBkb25lOiAhMSwgdmFsdWU6IHRbcisrXSB9O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZjogbyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcyA9ICEwLFxuICAgICAgICAgICAgYSA9ICExO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG4gPSBuLmNhbGwodCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gbi5uZXh0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChzID0gdC5kb25lKSwgdDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIChhID0gITApLCAoaSA9IHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGY6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzIHx8IG51bGwgPT0gbi5yZXR1cm4gfHwgbi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYSkgdGhyb3cgaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgZCA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvLFxuICAgICAgICB5ID0gW1wic291cmNlXCIsIFwicHJvdG9jb2xcIiwgXCJhdXRob3JpdHlcIiwgXCJ1c2VySW5mb1wiLCBcInVzZXJcIiwgXCJwYXNzd29yZFwiLCBcImhvc3RcIiwgXCJwb3J0XCIsIFwicmVsYXRpdmVcIiwgXCJwYXRoXCIsIFwiZGlyZWN0b3J5XCIsIFwiZmlsZVwiLCBcInF1ZXJ5XCIsIFwiYW5jaG9yXCJdLFxuICAgICAgICB2ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdCxcbiAgICAgICAgICAgICAgICBuID0gdC5pbmRleE9mKFwiW1wiKSxcbiAgICAgICAgICAgICAgICByID0gdC5pbmRleE9mKFwiXVwiKTtcbiAgICAgICAgICAgIC0xICE9IG4gJiYgLTEgIT0gciAmJiAodCA9IHQuc3Vic3RyaW5nKDAsIG4pICsgdC5zdWJzdHJpbmcobiwgcikucmVwbGFjZSgvOi9nLCBcIjtcIikgKyB0LnN1YnN0cmluZyhyLCB0Lmxlbmd0aCkpO1xuICAgICAgICAgICAgZm9yICh2YXIgbywgaSwgcyA9IGQuZXhlYyh0IHx8IFwiXCIpLCBhID0ge30sIGMgPSAxNDsgYy0tOyApIGFbeVtjXV0gPSBzW2NdIHx8IFwiXCI7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIC0xICE9IG4gJiYgLTEgIT0gciAmJiAoKGEuc291cmNlID0gZSksIChhLmhvc3QgPSBhLmhvc3Quc3Vic3RyaW5nKDEsIGEuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csIFwiOlwiKSksIChhLmF1dGhvcml0eSA9IGEuYXV0aG9yaXR5LnJlcGxhY2UoXCJbXCIsIFwiXCIpLnJlcGxhY2UoXCJdXCIsIFwiXCIpLnJlcGxhY2UoLzsvZywgXCI6XCIpKSwgKGEuaXB2NnVyaSA9ICEwKSksXG4gICAgICAgICAgICAgICAgKGEucGF0aE5hbWVzID0gKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gL1xcL3syLDl9L2csXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gZS5yZXBsYWNlKG4sIFwiL1wiKS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICAgICAgICAgIChcIi9cIiAhPSBlLnN1YnN0cigwLCAxKSAmJiAwICE9PSBlLmxlbmd0aCkgfHwgci5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIFwiL1wiID09IGUuc3Vic3RyKGUubGVuZ3RoIC0gMSwgMSkgJiYgci5zcGxpY2Uoci5sZW5ndGggLSAxLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICAgICAgfSkoMCwgYS5wYXRoKSksXG4gICAgICAgICAgICAgICAgKGEucXVlcnlLZXkgPVxuICAgICAgICAgICAgICAgICAgICAoKG8gPSBhLnF1ZXJ5KSxcbiAgICAgICAgICAgICAgICAgICAgKGkgPSB7fSksXG4gICAgICAgICAgICAgICAgICAgIG8ucmVwbGFjZSgvKD86XnwmKShbXiY9XSopPT8oW14mXSopL2csIGZ1bmN0aW9uICh0LCBlLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlICYmIChpW2VdID0gbik7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBpKSksXG4gICAgICAgICAgICAgICAgYVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICB2YXIgbSA9IHsgZXhwb3J0czoge30gfTtcbiAgICB0cnkge1xuICAgICAgICBtLmV4cG9ydHMgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiBcIndpdGhDcmVkZW50aWFsc1wiIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgbS5leHBvcnRzID0gITE7XG4gICAgfVxuICAgIHZhciBnID0gbS5leHBvcnRzLFxuICAgICAgICBrID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG4gICAgZnVuY3Rpb24gYih0KSB7XG4gICAgICAgIHZhciBlID0gdC54ZG9tYWluO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICghZSB8fCBnKSkgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgICBpZiAoIWUpXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcga1tbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpXShcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgICAgICAgfSBjYXRjaCAodCkge31cbiAgICB9XG4gICAgZnVuY3Rpb24gdyh0KSB7XG4gICAgICAgIGZvciAodmFyIGUgPSBhcmd1bWVudHMubGVuZ3RoLCBuID0gbmV3IEFycmF5KGUgPiAxID8gZSAtIDEgOiAwKSwgciA9IDE7IHIgPCBlOyByKyspIG5bciAtIDFdID0gYXJndW1lbnRzW3JdO1xuICAgICAgICByZXR1cm4gbi5yZWR1Y2UoZnVuY3Rpb24gKGUsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiB0Lmhhc093blByb3BlcnR5KG4pICYmIChlW25dID0gdFtuXSksIGU7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgdmFyIF8gPSBzZXRUaW1lb3V0LFxuICAgICAgICBFID0gY2xlYXJUaW1lb3V0O1xuICAgIGZ1bmN0aW9uIEEodCwgZSkge1xuICAgICAgICBlLnVzZU5hdGl2ZVRpbWVycyA/ICgodC5zZXRUaW1lb3V0Rm4gPSBfLmJpbmQoaykpLCAodC5jbGVhclRpbWVvdXRGbiA9IEUuYmluZChrKSkpIDogKCh0LnNldFRpbWVvdXRGbiA9IHNldFRpbWVvdXQuYmluZChrKSksICh0LmNsZWFyVGltZW91dEZuID0gY2xlYXJUaW1lb3V0LmJpbmQoaykpKTtcbiAgICB9XG4gICAgdmFyIFIgPSBUO1xuICAgIGZ1bmN0aW9uIFQodCkge1xuICAgICAgICBpZiAodClcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlIGluIFQucHJvdG90eXBlKSB0W2VdID0gVC5wcm90b3R5cGVbZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICB9KSh0KTtcbiAgICB9XG4gICAgKFQucHJvdG90eXBlLm9uID0gVC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9KSwgKHRoaXMuX2NhbGxiYWNrc1tcIiRcIiArIHRdID0gdGhpcy5fY2FsbGJhY2tzW1wiJFwiICsgdF0gfHwgW10pLnB1c2goZSksIHRoaXM7XG4gICAgfSksXG4gICAgICAgIChULnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmYodCwgbiksIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAobi5mbiA9IGUpLCB0aGlzLm9uKHQsIG4pLCB0aGlzO1xuICAgICAgICB9KSxcbiAgICAgICAgKFQucHJvdG90eXBlLm9mZiA9IFQucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gVC5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gVC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICBpZiAoKCh0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge30pLCAwID09IGFyZ3VtZW50cy5sZW5ndGgpKSByZXR1cm4gKHRoaXMuX2NhbGxiYWNrcyA9IHt9KSwgdGhpcztcbiAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgIHIgPSB0aGlzLl9jYWxsYmFja3NbXCIkXCIgKyB0XTtcbiAgICAgICAgICAgIGlmICghcikgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tcIiRcIiArIHRdLCB0aGlzO1xuICAgICAgICAgICAgZm9yICh2YXIgbyA9IDA7IG8gPCByLmxlbmd0aDsgbysrKVxuICAgICAgICAgICAgICAgIGlmICgobiA9IHJbb10pID09PSBlIHx8IG4uZm4gPT09IGUpIHtcbiAgICAgICAgICAgICAgICAgICAgci5zcGxpY2UobywgMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwID09PSByLmxlbmd0aCAmJiBkZWxldGUgdGhpcy5fY2FsbGJhY2tzW1wiJFwiICsgdF0sIHRoaXM7XG4gICAgICAgIH0pLFxuICAgICAgICAoVC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICAgICAgICAgICBmb3IgKHZhciBlID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKSwgbiA9IHRoaXMuX2NhbGxiYWNrc1tcIiRcIiArIHRdLCByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgZVtyIC0gMV0gPSBhcmd1bWVudHNbcl07XG4gICAgICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgICAgIHIgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG8gPSAobiA9IG4uc2xpY2UoMCkpLmxlbmd0aDsgciA8IG87ICsrcikgbltyXS5hcHBseSh0aGlzLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9KSxcbiAgICAgICAgKFQucHJvdG90eXBlLmVtaXRSZXNlcnZlZCA9IFQucHJvdG90eXBlLmVtaXQpLFxuICAgICAgICAoVC5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9KSwgdGhpcy5fY2FsbGJhY2tzW1wiJFwiICsgdF0gfHwgW107XG4gICAgICAgIH0pLFxuICAgICAgICAoVC5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiAhIXRoaXMubGlzdGVuZXJzKHQpLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgdmFyIEMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIChDLm9wZW4gPSBcIjBcIiksIChDLmNsb3NlID0gXCIxXCIpLCAoQy5waW5nID0gXCIyXCIpLCAoQy5wb25nID0gXCIzXCIpLCAoQy5tZXNzYWdlID0gXCI0XCIpLCAoQy51cGdyYWRlID0gXCI1XCIpLCAoQy5ub29wID0gXCI2XCIpO1xuICAgIHZhciBPID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBPYmplY3Qua2V5cyhDKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIE9bQ1t0XV0gPSB0O1xuICAgIH0pO1xuICAgIGZvciAoXG4gICAgICAgIHZhciBTID0geyB0eXBlOiBcImVycm9yXCIsIGRhdGE6IFwicGFyc2VyIGVycm9yXCIgfSxcbiAgICAgICAgICAgIEIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIEJsb2IgfHwgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEJsb2IgJiYgXCJbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl1cIiA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKEJsb2IpKSxcbiAgICAgICAgICAgIE4gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIEFycmF5QnVmZmVyLFxuICAgICAgICAgICAgeCA9IGZ1bmN0aW9uICh0LCBlLCBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0LmRhdGE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEIgJiYgaSBpbnN0YW5jZW9mIEJsb2JcbiAgICAgICAgICAgICAgICAgICAgPyBlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG4oaSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogTChpLCBuKVxuICAgICAgICAgICAgICAgICAgICA6IE4gJiYgKGkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCAoKHIgPSBpKSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPyBBcnJheUJ1ZmZlci5pc1ZpZXcocikgOiByICYmIHIuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKVxuICAgICAgICAgICAgICAgICAgICA/IGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbihpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBMKG5ldyBCbG9iKFtpXSksIG4pXG4gICAgICAgICAgICAgICAgICAgIDogbihDW29dICsgKGkgfHwgXCJcIikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEwgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAobi5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG4ucmVzdWx0LnNwbGl0KFwiLFwiKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUoXCJiXCIgKyB0KTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG4ucmVhZEFzRGF0YVVSTCh0KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaiA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLFxuICAgICAgICAgICAgUCA9IFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIFVpbnQ4QXJyYXkgPyBbXSA6IG5ldyBVaW50OEFycmF5KDI1NiksXG4gICAgICAgICAgICBxID0gMDtcbiAgICAgICAgcSA8IGoubGVuZ3RoO1xuICAgICAgICBxKytcbiAgICApXG4gICAgICAgIFBbai5jaGFyQ29kZUF0KHEpXSA9IHE7XG4gICAgdmFyIEQsXG4gICAgICAgIEkgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIEFycmF5QnVmZmVyLFxuICAgICAgICBGID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiB0KSByZXR1cm4geyB0eXBlOiBcIm1lc3NhZ2VcIiwgZGF0YTogVSh0LCBlKSB9O1xuICAgICAgICAgICAgdmFyIG4gPSB0LmNoYXJBdCgwKTtcbiAgICAgICAgICAgIHJldHVybiBcImJcIiA9PT0gbiA/IHsgdHlwZTogXCJtZXNzYWdlXCIsIGRhdGE6IE0odC5zdWJzdHJpbmcoMSksIGUpIH0gOiBPW25dID8gKHQubGVuZ3RoID4gMSA/IHsgdHlwZTogT1tuXSwgZGF0YTogdC5zdWJzdHJpbmcoMSkgfSA6IHsgdHlwZTogT1tuXSB9KSA6IFM7XG4gICAgICAgIH0sXG4gICAgICAgIE0gPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgaWYgKEkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gMC43NSAqIHQubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHQubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIFwiPVwiID09PSB0W3QubGVuZ3RoIC0gMV0gJiYgKHMtLSwgXCI9XCIgPT09IHRbdC5sZW5ndGggLSAyXSAmJiBzLS0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IG5ldyBBcnJheUJ1ZmZlcihzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBuZXcgVWludDhBcnJheSh1KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gMDsgZSA8IGE7IGUgKz0gNClcbiAgICAgICAgICAgICAgICAgICAgICAgIChuID0gUFt0LmNoYXJDb2RlQXQoZSldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAociA9IFBbdC5jaGFyQ29kZUF0KGUgKyAxKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvID0gUFt0LmNoYXJDb2RlQXQoZSArIDIpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGkgPSBQW3QuY2hhckNvZGVBdChlICsgMyldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaFtjKytdID0gKG4gPDwgMikgfCAociA+PiA0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhbYysrXSA9ICgoMTUgJiByKSA8PCA0KSB8IChvID4+IDIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaFtjKytdID0gKCgzICYgbykgPDwgNikgfCAoNjMgJiBpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICAgICAgICAgIH0pKHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBVKG4sIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgYmFzZTY0OiAhMCwgZGF0YTogdCB9O1xuICAgICAgICB9LFxuICAgICAgICBVID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcImJsb2JcIiA9PT0gZSAmJiB0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBuZXcgQmxvYihbdF0pIDogdDtcbiAgICAgICAgfSxcbiAgICAgICAgViA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMzApLFxuICAgICAgICBIID0gKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBpKG8sIHQpO1xuICAgICAgICAgICAgdmFyIG4gPSBoKG8pO1xuICAgICAgICAgICAgZnVuY3Rpb24gbyh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUodGhpcywgbyksICgociA9IG4uY2FsbCh0aGlzKSkud3JpdGFibGUgPSAhMSksIEEoYyhyKSwgdCksIChyLm9wdHMgPSB0KSwgKHIucXVlcnkgPSB0LnF1ZXJ5KSwgKHIucmVhZHlTdGF0ZSA9IFwiXCIpLCAoci5zb2NrZXQgPSB0LnNvY2tldCksIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHIobywgW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25FcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgRXJyb3IodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuLnR5cGUgPSBcIlRyYW5zcG9ydEVycm9yXCIpLCAobi5kZXNjcmlwdGlvbiA9IGUpLCBmKHMoby5wcm90b3R5cGUpLCBcImVtaXRcIiwgdGhpcykuY2FsbCh0aGlzLCBcImVycm9yXCIsIG4pLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9wZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgXCJcIiAhPT0gdGhpcy5yZWFkeVN0YXRlKSB8fCAoKHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiKSwgdGhpcy5kb09wZW4oKSksIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiY2xvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIm9wZW5pbmdcIiAhPT0gdGhpcy5yZWFkeVN0YXRlICYmIFwib3BlblwiICE9PSB0aGlzLnJlYWR5U3RhdGUpIHx8ICh0aGlzLmRvQ2xvc2UoKSwgdGhpcy5vbkNsb3NlKCkpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInNlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy53cml0ZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbk9wZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiKSwgKHRoaXMud3JpdGFibGUgPSAhMCksIGYocyhvLnByb3RvdHlwZSksIFwiZW1pdFwiLCB0aGlzKS5jYWxsKHRoaXMsIFwib3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbkRhdGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gRih0LCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUGFja2V0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uUGFja2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmKHMoby5wcm90b3R5cGUpLCBcImVtaXRcIiwgdGhpcykuY2FsbCh0aGlzLCBcInBhY2tldFwiLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbkNsb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NlZFwiKSwgZihzKG8ucHJvdG90eXBlKSwgXCJlbWl0XCIsIHRoaXMpLmNhbGwodGhpcywgXCJjbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgb1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSkoUiksXG4gICAgICAgIEsgPSBcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV9cIi5zcGxpdChcIlwiKSxcbiAgICAgICAgWSA9IHt9LFxuICAgICAgICB6ID0gMCxcbiAgICAgICAgJCA9IDA7XG4gICAgZnVuY3Rpb24gVyh0KSB7XG4gICAgICAgIHZhciBlID0gXCJcIjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgKGUgPSBLW3QgJSA2NF0gKyBlKSwgKHQgPSBNYXRoLmZsb29yKHQgLyA2NCkpO1xuICAgICAgICB9IHdoaWxlICh0ID4gMCk7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBKKCkge1xuICAgICAgICB2YXIgdCA9IFcoK25ldyBEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdCAhPT0gRCA/ICgoeiA9IDApLCAoRCA9IHQpKSA6IHQgKyBcIi5cIiArIFcoeisrKTtcbiAgICB9XG4gICAgZm9yICg7ICQgPCA2NDsgJCsrKSBZW0tbJF1dID0gJDtcbiAgICAoSi5lbmNvZGUgPSBXKSxcbiAgICAgICAgKEouZGVjb2RlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gMDtcbiAgICAgICAgICAgIGZvciAoJCA9IDA7ICQgPCB0Lmxlbmd0aDsgJCsrKSBlID0gNjQgKiBlICsgWVt0LmNoYXJBdCgkKV07XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSk7XG4gICAgdmFyIFggPSBKLFxuICAgICAgICBHID0ge1xuICAgICAgICAgICAgZW5jb2RlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gXCJcIjtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuIGluIHQpIHQuaGFzT3duUHJvcGVydHkobikgJiYgKGUubGVuZ3RoICYmIChlICs9IFwiJlwiKSwgKGUgKz0gZW5jb2RlVVJJQ29tcG9uZW50KG4pICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodFtuXSkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWNvZGU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IHt9LCBuID0gdC5zcGxpdChcIiZcIiksIHIgPSAwLCBvID0gbi5sZW5ndGg7IHIgPCBvOyByKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBuW3JdLnNwbGl0KFwiPVwiKTtcbiAgICAgICAgICAgICAgICAgICAgZVtkZWNvZGVVUklDb21wb25lbnQoaVswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KGlbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFEgPSAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGkobywgdCk7XG4gICAgICAgICAgICB2YXIgbiA9IGgobyk7XG4gICAgICAgICAgICBmdW5jdGlvbiBvKCkge1xuICAgICAgICAgICAgICAgIHZhciB0O1xuICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMsIG8pLCAoKHQgPSBuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLnBvbGxpbmcgPSAhMSksIHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHIobywgW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwibmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicG9sbGluZ1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImRvT3BlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJwYXVzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwicGF1c2luZ1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZS5yZWFkeVN0YXRlID0gXCJwYXVzZWRcIiksIHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGxpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJwb2xsQ29tcGxldGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tciB8fCBuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyaXRhYmxlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIrKyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJkcmFpblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tciB8fCBuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwicG9sbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5wb2xsaW5nID0gITApLCB0aGlzLmRvUG9sbCgpLCB0aGlzLmVtaXQoXCJwb2xsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uRGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gdC5zcGxpdChWKSwgciA9IFtdLCBvID0gMDsgbyA8IG4ubGVuZ3RoOyBvKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gRihuW29dLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoci5wdXNoKGkpLCBcImVycm9yXCIgPT09IGkudHlwZSkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKHQsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChcIm9wZW5pbmdcIiA9PT0gZS5yZWFkeVN0YXRlICYmIFwib3BlblwiID09PSB0LnR5cGUgJiYgZS5vbk9wZW4oKSwgXCJjbG9zZVwiID09PSB0LnR5cGUpKSByZXR1cm4gZS5vbkNsb3NlKCksICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLm9uUGFja2V0KHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgKCh0aGlzLnBvbGxpbmcgPSAhMSksIHRoaXMuZW1pdChcInBvbGxDb21wbGV0ZVwiKSwgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnBvbGwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZG9DbG9zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LndyaXRlKFt7IHR5cGU6IFwiY2xvc2VcIiB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSA/IGUoKSA6IHRoaXMub25jZShcIm9wZW5cIiwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwid3JpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy53cml0YWJsZSA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmZvckVhY2goZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4KHQsICExLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocltpXSA9IHQpLCArK28gPT09IG4gJiYgZShyLmpvaW4oVikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKHQsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmRvV3JpdGUodCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLndyaXRhYmxlID0gITApLCBlLmVtaXQoXCJkcmFpblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJ1cmlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnF1ZXJ5IHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5vcHRzLnNlY3VyZSA/IFwiaHR0cHNcIiA6IFwiaHR0cFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMSAhPT0gdGhpcy5vcHRzLnRpbWVzdGFtcFJlcXVlc3RzICYmICh0W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSBYKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1cHBvcnRzQmluYXJ5IHx8IHQuc2lkIHx8ICh0LmI2NCA9IDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHMucG9ydCAmJiAoKFwiaHR0cHNcIiA9PT0gZSAmJiA0NDMgIT09IE51bWJlcih0aGlzLm9wdHMucG9ydCkpIHx8IChcImh0dHBcIiA9PT0gZSAmJiA4MCAhPT0gTnVtYmVyKHRoaXMub3B0cy5wb3J0KSkpICYmIChuID0gXCI6XCIgKyB0aGlzLm9wdHMucG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBHLmVuY29kZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSArIFwiOi8vXCIgKyAoLTEgIT09IHRoaXMub3B0cy5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSA/IFwiW1wiICsgdGhpcy5vcHRzLmhvc3RuYW1lICsgXCJdXCIgOiB0aGlzLm9wdHMuaG9zdG5hbWUpICsgbiArIHRoaXMub3B0cy5wYXRoICsgKHIubGVuZ3RoID8gXCI/XCIgKyByIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIG9cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pKEgpO1xuICAgIGZ1bmN0aW9uIFooKSB7fVxuICAgIHZhciB0dCA9IG51bGwgIT0gbmV3IGIoeyB4ZG9tYWluOiAhMSB9KS5yZXNwb25zZVR5cGUsXG4gICAgICAgIGV0ID0gKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBpKHMsIHQpO1xuICAgICAgICAgICAgdmFyIG4gPSBoKHMpO1xuICAgICAgICAgICAgZnVuY3Rpb24gcyh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHI7XG4gICAgICAgICAgICAgICAgaWYgKChlKHRoaXMsIHMpLCAociA9IG4uY2FsbCh0aGlzLCB0KSksIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGxvY2F0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IFwiaHR0cHM6XCIgPT09IGxvY2F0aW9uLnByb3RvY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGxvY2F0aW9uLnBvcnQ7XG4gICAgICAgICAgICAgICAgICAgIGkgfHwgKGkgPSBvID8gXCI0NDNcIiA6IFwiODBcIiksIChyLnhkID0gKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGxvY2F0aW9uICYmIHQuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lKSB8fCBpICE9PSB0LnBvcnQpLCAoci54cyA9IHQuc2VjdXJlICE9PSBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0ICYmIHQuZm9yY2VCYXNlNjQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChyLnN1cHBvcnRzQmluYXJ5ID0gdHQgJiYgIWEpLCByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICByKHMsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInJlcXVlc3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1swXSA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvKHQsIHsgeGQ6IHRoaXMueGQsIHhzOiB0aGlzLnhzIH0sIHRoaXMub3B0cyksIG5ldyBudCh0aGlzLnVyaSgpLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJkb1dyaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6IFwiUE9TVFwiLCBkYXRhOiB0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIub24oXCJzdWNjZXNzXCIsIGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ub25FcnJvcihcInhociBwb3N0IGVycm9yXCIsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJkb1BvbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5yZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5vbihcImRhdGFcIiwgdGhpcy5vbkRhdGEuYmluZCh0aGlzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUub24oXCJlcnJvclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5vbkVycm9yKFwieGhyIHBvbGwgZXJyb3JcIiwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5wb2xsWGhyID0gZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIHNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pKFEpLFxuICAgICAgICBudCA9IChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgaShvLCB0KTtcbiAgICAgICAgICAgIHZhciBuID0gaChvKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIG8odCwgcikge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMsIG8pLCBBKGMoKGkgPSBuLmNhbGwodGhpcykpKSwgciksIChpLm9wdHMgPSByKSwgKGkubWV0aG9kID0gci5tZXRob2QgfHwgXCJHRVRcIiksIChpLnVyaSA9IHQpLCAoaS5hc3luYyA9ICExICE9PSByLmFzeW5jKSwgKGkuZGF0YSA9IHZvaWQgMCAhPT0gci5kYXRhID8gci5kYXRhIDogbnVsbCksIGkuY3JlYXRlKCksIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHIobywgW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiY3JlYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHcodGhpcy5vcHRzLCBcImFnZW50XCIsIFwicGZ4XCIsIFwia2V5XCIsIFwicGFzc3BocmFzZVwiLCBcImNlcnRcIiwgXCJjYVwiLCBcImNpcGhlcnNcIiwgXCJyZWplY3RVbmF1dGhvcml6ZWRcIiwgXCJhdXRvVW5yZWZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUueGRvbWFpbiA9ICEhdGhpcy5vcHRzLnhkKSwgKGUueHNjaGVtZSA9ICEhdGhpcy5vcHRzLnhzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9ICh0aGlzLnhociA9IG5ldyBiKGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgaW4gKG4uc2V0RGlzYWJsZUhlYWRlckNoZWNrICYmIG4uc2V0RGlzYWJsZUhlYWRlckNoZWNrKCEwKSwgdGhpcy5vcHRzLmV4dHJhSGVhZGVycykpIHRoaXMub3B0cy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkocikgJiYgbi5zZXRSZXF1ZXN0SGVhZGVyKHIsIHRoaXMub3B0cy5leHRyYUhlYWRlcnNbcl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJQT1NUXCIgPT09IHRoaXMubWV0aG9kKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndpdGhDcmVkZW50aWFsc1wiIGluIG4gJiYgKG4ud2l0aENyZWRlbnRpYWxzID0gdGhpcy5vcHRzLndpdGhDcmVkZW50aWFscyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHMucmVxdWVzdFRpbWVvdXQgJiYgKG4udGltZW91dCA9IHRoaXMub3B0cy5yZXF1ZXN0VGltZW91dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobi5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNCA9PT0gbi5yZWFkeVN0YXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgyMDAgPT09IG4uc3RhdHVzIHx8IDEyMjMgPT09IG4uc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHQub25Mb2FkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdC5zZXRUaW1lb3V0Rm4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5vbkVycm9yKFwibnVtYmVyXCIgPT0gdHlwZW9mIG4uc3RhdHVzID8gbi5zdGF0dXMgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnNlbmQodGhpcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIHRoaXMuc2V0VGltZW91dEZuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQub25FcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGRvY3VtZW50ICYmICgodGhpcy5pbmRleCA9IG8ucmVxdWVzdHNDb3VudCsrKSwgKG8ucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25TdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInN1Y2Nlc3NcIiksIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uRGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCB0KSwgdGhpcy5vblN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbkVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCB0KSwgdGhpcy5jbGVhbnVwKCEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJjbGVhbnVwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0aGlzLnhociAmJiBudWxsICE9PSB0aGlzLnhocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCh0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBaKSwgdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCAmJiBkZWxldGUgby5yZXF1ZXN0c1t0aGlzLmluZGV4XSwgKHRoaXMueGhyID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uTG9hZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSB0ICYmIHRoaXMub25EYXRhKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImFib3J0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBvXG4gICAgICAgICAgICApO1xuICAgICAgICB9KShSKTtcbiAgICBpZiAoKChudC5yZXF1ZXN0c0NvdW50ID0gMCksIChudC5yZXF1ZXN0cyA9IHt9KSwgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZG9jdW1lbnQpKVxuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBhdHRhY2hFdmVudCkgYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLCBydCk7XG4gICAgICAgIGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcIm9ucGFnZWhpZGVcIiBpbiBrID8gXCJwYWdlaGlkZVwiIDogXCJ1bmxvYWRcIiwgcnQsICExKTtcbiAgICAgICAgfVxuICAgIGZ1bmN0aW9uIHJ0KCkge1xuICAgICAgICBmb3IgKHZhciB0IGluIG50LnJlcXVlc3RzKSBudC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eSh0KSAmJiBudC5yZXF1ZXN0c1t0XS5hYm9ydCgpO1xuICAgIH1cbiAgICB2YXIgb3QgPVxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBQcm9taXNlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgUHJvbWlzZS5yZXNvbHZlXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKHQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0LCAwKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgIGl0ID0gay5XZWJTb2NrZXQgfHwgay5Nb3pXZWJTb2NrZXQsXG4gICAgICAgIHN0ID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgbmF2aWdhdG9yICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIG5hdmlnYXRvci5wcm9kdWN0ICYmIFwicmVhY3RuYXRpdmVcIiA9PT0gbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgYXQgPSAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGkobywgdCk7XG4gICAgICAgICAgICB2YXIgbiA9IGgobyk7XG4gICAgICAgICAgICBmdW5jdGlvbiBvKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZSh0aGlzLCBvKSwgKChyID0gbi5jYWxsKHRoaXMsIHQpKS5zdXBwb3J0c0JpbmFyeSA9ICF0LmZvcmNlQmFzZTY0KSwgcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgcihvLCBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJuYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ3ZWJzb2NrZXRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJkb09wZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2soKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMudXJpKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5vcHRzLnByb3RvY29scyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHcoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWdlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBlck1lc3NhZ2VEZWZsYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwZnhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFzc3BocmFzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2VydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNpcGhlcnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlamVjdFVuYXV0aG9yaXplZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibG9jYWxBZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm90b2NvbFZlcnNpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWF4UGF5bG9hZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmFtaWx5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGVja1NlcnZlcklkZW50aXR5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0cy5leHRyYUhlYWRlcnMgJiYgKG4uaGVhZGVycyA9IHRoaXMub3B0cy5leHRyYUhlYWRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cyA9IHN0ID8gbmV3IGl0KHQsIGUsIG4pIDogZSA/IG5ldyBpdCh0LCBlKSA6IG5ldyBpdCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLndzLmJpbmFyeVR5cGUgPSB0aGlzLnNvY2tldC5iaW5hcnlUeXBlIHx8IFwiYXJyYXlidWZmZXJcIiksIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiYWRkRXZlbnRMaXN0ZW5lcnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5vcHRzLmF1dG9VbnJlZiAmJiB0LndzLl9zb2NrZXQudW5yZWYoKSwgdC5vbk9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMud3Mub25jbG9zZSA9IHRoaXMub25DbG9zZS5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0Lm9uRGF0YShlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5vbkVycm9yKFwid2Vic29ja2V0IGVycm9yXCIsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJ3cml0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGFibGUgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0W25dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gbiA9PT0gdC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgociwgZS5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUud3Muc2VuZCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlLndyaXRhYmxlID0gITApLCBlLmVtaXQoXCJkcmFpblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGUuc2V0VGltZW91dEZuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA8IHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByKytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ocik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZG9DbG9zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHRoaXMud3MgJiYgKHRoaXMud3MuY2xvc2UoKSwgKHRoaXMud3MgPSBudWxsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwidXJpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5xdWVyeSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMub3B0cy5zZWN1cmUgPyBcIndzc1wiIDogXCJ3c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHMucG9ydCAmJiAoKFwid3NzXCIgPT09IGUgJiYgNDQzICE9PSBOdW1iZXIodGhpcy5vcHRzLnBvcnQpKSB8fCAoXCJ3c1wiID09PSBlICYmIDgwICE9PSBOdW1iZXIodGhpcy5vcHRzLnBvcnQpKSkgJiYgKG4gPSBcIjpcIiArIHRoaXMub3B0cy5wb3J0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRzLnRpbWVzdGFtcFJlcXVlc3RzICYmICh0W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSBYKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1cHBvcnRzQmluYXJ5IHx8ICh0LmI2NCA9IDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gRy5lbmNvZGUodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgKyBcIjovL1wiICsgKC0xICE9PSB0aGlzLm9wdHMuaG9zdG5hbWUuaW5kZXhPZihcIjpcIikgPyBcIltcIiArIHRoaXMub3B0cy5ob3N0bmFtZSArIFwiXVwiIDogdGhpcy5vcHRzLmhvc3RuYW1lKSArIG4gKyB0aGlzLm9wdHMucGF0aCArIChyLmxlbmd0aCA/IFwiP1wiICsgciA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImNoZWNrXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhKCFpdCB8fCAoXCJfX2luaXRpYWxpemVcIiBpbiBpdCAmJiB0aGlzLm5hbWUgPT09IG8ucHJvdG90eXBlLm5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgb1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSkoSCksXG4gICAgICAgIGN0ID0geyB3ZWJzb2NrZXQ6IGF0LCBwb2xsaW5nOiBldCB9LFxuICAgICAgICB1dCA9IChmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgaShhLCBuKTtcbiAgICAgICAgICAgIHZhciBzID0gaChhKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGEobikge1xuICAgICAgICAgICAgICAgIHZhciByLFxuICAgICAgICAgICAgICAgICAgICBpID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlKHRoaXMsIGEpLFxuICAgICAgICAgICAgICAgICAgICAociA9IHMuY2FsbCh0aGlzKSksXG4gICAgICAgICAgICAgICAgICAgIG4gJiYgXCJvYmplY3RcIiA9PT0gdChuKSAmJiAoKGkgPSBuKSwgKG4gPSBudWxsKSksXG4gICAgICAgICAgICAgICAgICAgIG4gPyAoKG4gPSB2KG4pKSwgKGkuaG9zdG5hbWUgPSBuLmhvc3QpLCAoaS5zZWN1cmUgPSBcImh0dHBzXCIgPT09IG4ucHJvdG9jb2wgfHwgXCJ3c3NcIiA9PT0gbi5wcm90b2NvbCksIChpLnBvcnQgPSBuLnBvcnQpLCBuLnF1ZXJ5ICYmIChpLnF1ZXJ5ID0gbi5xdWVyeSkpIDogaS5ob3N0ICYmIChpLmhvc3RuYW1lID0gdihpLmhvc3QpLmhvc3QpLFxuICAgICAgICAgICAgICAgICAgICBBKGMociksIGkpLFxuICAgICAgICAgICAgICAgICAgICAoci5zZWN1cmUgPSBudWxsICE9IGkuc2VjdXJlID8gaS5zZWN1cmUgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBsb2NhdGlvbiAmJiBcImh0dHBzOlwiID09PSBsb2NhdGlvbi5wcm90b2NvbCksXG4gICAgICAgICAgICAgICAgICAgIGkuaG9zdG5hbWUgJiYgIWkucG9ydCAmJiAoaS5wb3J0ID0gci5zZWN1cmUgPyBcIjQ0M1wiIDogXCI4MFwiKSxcbiAgICAgICAgICAgICAgICAgICAgKHIuaG9zdG5hbWUgPSBpLmhvc3RuYW1lIHx8IChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBsb2NhdGlvbiA/IGxvY2F0aW9uLmhvc3RuYW1lIDogXCJsb2NhbGhvc3RcIikpLFxuICAgICAgICAgICAgICAgICAgICAoci5wb3J0ID0gaS5wb3J0IHx8IChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBsb2NhdGlvbiAmJiBsb2NhdGlvbi5wb3J0ID8gbG9jYXRpb24ucG9ydCA6IHIuc2VjdXJlID8gXCI0NDNcIiA6IFwiODBcIikpLFxuICAgICAgICAgICAgICAgICAgICAoci50cmFuc3BvcnRzID0gaS50cmFuc3BvcnRzIHx8IFtcInBvbGxpbmdcIiwgXCJ3ZWJzb2NrZXRcIl0pLFxuICAgICAgICAgICAgICAgICAgICAoci5yZWFkeVN0YXRlID0gXCJcIiksXG4gICAgICAgICAgICAgICAgICAgIChyLndyaXRlQnVmZmVyID0gW10pLFxuICAgICAgICAgICAgICAgICAgICAoci5wcmV2QnVmZmVyTGVuID0gMCksXG4gICAgICAgICAgICAgICAgICAgIChyLm9wdHMgPSBvKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IFwiL2VuZ2luZS5pb1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW50OiAhMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6ICExLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZ3JhZGU6ICEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcFBhcmFtOiBcInRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1lbWJlclVwZ3JhZGU6ICExLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IHsgdGhyZXNob2xkOiAxMDI0IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0T3B0aW9uczoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VPbkJlZm9yZXVubG9hZDogITAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgKHIub3B0cy5wYXRoID0gci5vcHRzLnBhdGgucmVwbGFjZSgvXFwvJC8sIFwiXCIpICsgXCIvXCIpLFxuICAgICAgICAgICAgICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiByLm9wdHMucXVlcnkgJiYgKHIub3B0cy5xdWVyeSA9IEcuZGVjb2RlKHIub3B0cy5xdWVyeSkpLFxuICAgICAgICAgICAgICAgICAgICAoci5pZCA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAoci51cGdyYWRlcyA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAoci5waW5nSW50ZXJ2YWwgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgKHIucGluZ1RpbWVvdXQgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgKHIucGluZ1RpbWVvdXRUaW1lciA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChyLm9wdHMuY2xvc2VPbkJlZm9yZXVubG9hZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYmVmb3JldW5sb2FkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIudHJhbnNwb3J0ICYmIChyLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKSwgci50cmFuc3BvcnQuY2xvc2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICExXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibG9jYWxob3N0XCIgIT09IHIuaG9zdG5hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHIub2ZmbGluZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIub25DbG9zZShcInRyYW5zcG9ydCBjbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCByLm9mZmxpbmVFdmVudExpc3RlbmVyLCAhMSkpKSxcbiAgICAgICAgICAgICAgICAgICAgci5vcGVuKCksXG4gICAgICAgICAgICAgICAgICAgIHJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICByKGEsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImNyZWF0ZVRyYW5zcG9ydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiBpbiB0KSB0Lmhhc093blByb3BlcnR5KG4pICYmIChlW25dID0gdFtuXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKHRoaXMub3B0cy5xdWVyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUuRUlPID0gNCksIChlLnRyYW5zcG9ydCA9IHQpLCB0aGlzLmlkICYmIChlLnNpZCA9IHRoaXMuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbyh7fSwgdGhpcy5vcHRzLnRyYW5zcG9ydE9wdGlvbnNbdF0sIHRoaXMub3B0cywgeyBxdWVyeTogZSwgc29ja2V0OiB0aGlzLCBob3N0bmFtZTogdGhpcy5ob3N0bmFtZSwgc2VjdXJlOiB0aGlzLnNlY3VyZSwgcG9ydDogdGhpcy5wb3J0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgY3RbdF0obik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib3BlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5yZW1lbWJlclVwZ3JhZGUgJiYgYS5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgLTEgIT09IHRoaXMudHJhbnNwb3J0cy5pbmRleE9mKFwid2Vic29ja2V0XCIpKSB0ID0gXCJ3ZWJzb2NrZXRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCB0aGlzLnNldFRpbWVvdXRGbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBcIk5vIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLnRyYW5zcG9ydHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKSwgdm9pZCB0aGlzLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5vcGVuKCksIHRoaXMuc2V0VHJhbnNwb3J0KHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInNldFRyYW5zcG9ydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ICYmIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy50cmFuc3BvcnQgPSB0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKFwiZHJhaW5cIiwgdGhpcy5vbkRyYWluLmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oXCJwYWNrZXRcIiwgdGhpcy5vblBhY2tldC5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKFwiZXJyb3JcIiwgdGhpcy5vbkVycm9yLmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oXCJjbG9zZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwicHJvYmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gITE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG4uc2VuZChbeyB0eXBlOiBcInBpbmdcIiwgZGF0YTogXCJwcm9iZVwiIH1dKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ub25jZShcInBhY2tldFwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwicG9uZ1wiID09PSB0LnR5cGUgJiYgXCJwcm9iZVwiID09PSB0LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKGUudXBncmFkaW5nID0gITApLCBlLmVtaXRSZXNlcnZlZChcInVwZ3JhZGluZ1wiLCBuKSwgIW4pKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYS5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBcIndlYnNvY2tldFwiID09PSBuLm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciB8fCAoXCJjbG9zZWRcIiAhPT0gZS5yZWFkeVN0YXRlICYmIChmKCksIGUuc2V0VHJhbnNwb3J0KG4pLCBuLnNlbmQoW3sgdHlwZTogXCJ1cGdyYWRlXCIgfV0pLCBlLmVtaXRSZXNlcnZlZChcInVwZ3JhZGVcIiwgbiksIChuID0gbnVsbCksIChlLnVwZ3JhZGluZyA9ICExKSwgZS5mbHVzaCgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IG5ldyBFcnJvcihcInByb2JlIGVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG8udHJhbnNwb3J0ID0gbi5uYW1lKSwgZS5lbWl0UmVzZXJ2ZWQoXCJ1cGdyYWRlRXJyb3JcIiwgbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGkoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgfHwgKChyID0gITApLCBmKCksIG4uY2xvc2UoKSwgKG4gPSBudWxsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvcjogXCIgKyB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIudHJhbnNwb3J0ID0gbi5uYW1lKSwgaSgpLCBlLmVtaXRSZXNlcnZlZChcInVwZ3JhZGVFcnJvclwiLCByKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMoXCJ0cmFuc3BvcnQgY2xvc2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB1KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKFwic29ja2V0IGNsb3NlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaCh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gJiYgdC5uYW1lICE9PSBuLm5hbWUgJiYgaSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5yZW1vdmVMaXN0ZW5lcihcIm9wZW5cIiwgbyksIG4ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBzKSwgbi5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIGMpLCBlLm9mZihcImNsb3NlXCIsIHUpLCBlLm9mZihcInVwZ3JhZGluZ1wiLCBoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ub25jZShcIm9wZW5cIiwgbyksIG4ub25jZShcImVycm9yXCIsIHMpLCBuLm9uY2UoXCJjbG9zZVwiLCBjKSwgdGhpcy5vbmNlKFwiY2xvc2VcIiwgdSksIHRoaXMub25jZShcInVwZ3JhZGluZ1wiLCBoKSwgbi5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25PcGVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiKSwgKGEucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdGhpcy50cmFuc3BvcnQubmFtZSksIHRoaXMuZW1pdFJlc2VydmVkKFwib3BlblwiKSwgdGhpcy5mbHVzaCgpLCBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMub3B0cy51cGdyYWRlICYmIHRoaXMudHJhbnNwb3J0LnBhdXNlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDAsIGUgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDsgdCA8IGU7IHQrKykgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW3RdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvblBhY2tldFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcImNsb3NpbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCh0aGlzLmVtaXRSZXNlcnZlZChcInBhY2tldFwiLCB0KSwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJoZWFydGJlYXRcIiksIHQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHQuZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInBpbmdcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKSwgdGhpcy5zZW5kUGFja2V0KFwicG9uZ1wiKSwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwaW5nXCIpLCB0aGlzLmVtaXRSZXNlcnZlZChcInBvbmdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcihcInNlcnZlciBlcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZS5jb2RlID0gdC5kYXRhKSwgdGhpcy5vbkVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRhdGFcIiwgdC5kYXRhKSwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJtZXNzYWdlXCIsIHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbkhhbmRzaGFrZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJoYW5kc2hha2VcIiwgdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmlkID0gdC5zaWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gdC5zaWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy51cGdyYWRlcyA9IHRoaXMuZmlsdGVyVXBncmFkZXModC51cGdyYWRlcykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5waW5nSW50ZXJ2YWwgPSB0LnBpbmdJbnRlcnZhbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpbmdUaW1lb3V0ID0gdC5waW5nVGltZW91dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25PcGVuKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xvc2VkXCIgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJyZXNldFBpbmdUaW1lb3V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dEZuKHRoaXMucGluZ1RpbWVvdXRUaW1lciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSB0aGlzLnNldFRpbWVvdXRGbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm9uQ2xvc2UoXCJwaW5nIHRpbWVvdXRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMucGluZ0ludGVydmFsICsgdGhpcy5waW5nVGltZW91dCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHMuYXV0b1VucmVmICYmIHRoaXMucGluZ1RpbWVvdXRUaW1lci51bnJlZigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uRHJhaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKSwgKHRoaXMucHJldkJ1ZmZlckxlbiA9IDApLCAwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCA/IHRoaXMuZW1pdFJlc2VydmVkKFwiZHJhaW5cIikgOiB0aGlzLmZsdXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZmx1c2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbG9zZWRcIiAhPT0gdGhpcy5yZWFkeVN0YXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LndyaXRhYmxlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF0aGlzLnVwZ3JhZGluZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKSwgKHRoaXMucHJldkJ1ZmZlckxlbiA9IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJmbHVzaFwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwid3JpdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCwgZSwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIHQsIGUsIG4pLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInNlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCwgZSwgbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIHQsIGUsIG4pLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInNlbmRQYWNrZXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCwgZSwgbiwgcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoXCJmdW5jdGlvblwiID09IHR5cGVvZiBlICYmICgociA9IGUpLCAoZSA9IHZvaWQgMCkpLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG4gJiYgKChyID0gbiksIChuID0gbnVsbCkpLCBcImNsb3NpbmdcIiAhPT0gdGhpcy5yZWFkeVN0YXRlICYmIFwiY2xvc2VkXCIgIT09IHRoaXMucmVhZHlTdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG4gPSBuIHx8IHt9KS5jb21wcmVzcyA9ICExICE9PSBuLmNvbXByZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHsgdHlwZTogdCwgZGF0YTogZSwgb3B0aW9uczogbiB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBhY2tldENyZWF0ZVwiLCBvKSwgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKG8pLCByICYmIHRoaXMub25jZShcImZsdXNoXCIsIHIpLCB0aGlzLmZsdXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImNsb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQub25DbG9zZShcImZvcmNlZCBjbG9zZVwiKSwgdC50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm9mZihcInVwZ3JhZGVcIiwgbiksIHQub2ZmKFwidXBncmFkZUVycm9yXCIsIG4pLCBlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm9uY2UoXCJ1cGdyYWRlXCIsIG4pLCB0Lm9uY2UoXCJ1cGdyYWRlRXJyb3JcIiwgbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwib3BlbmluZ1wiICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgXCJvcGVuXCIgIT09IHRoaXMucmVhZHlTdGF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zaW5nXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMub25jZShcImRyYWluXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnVwZ3JhZGluZyA/IHIoKSA6IGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnVwZ3JhZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbkVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYS5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAhMSksIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgdCksIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBlcnJvclwiLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbkNsb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJvcGVuaW5nXCIgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiBcIm9wZW5cIiAhPT0gdGhpcy5yZWFkeVN0YXRlICYmIFwiY2xvc2luZ1wiICE9PSB0aGlzLnJlYWR5U3RhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmNsZWFyVGltZW91dEZuKHRoaXMucGluZ1RpbWVvdXRUaW1lciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycyhcImNsb3NlXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiByZW1vdmVFdmVudExpc3RlbmVyICYmIHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHRoaXMub2ZmbGluZUV2ZW50TGlzdGVuZXIsICExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pZCA9IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNsb3NlXCIsIHQsIGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy53cml0ZUJ1ZmZlciA9IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucHJldkJ1ZmZlckxlbiA9IDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJmaWx0ZXJVcGdyYWRlc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IFtdLCBuID0gMCwgciA9IHQubGVuZ3RoOyBuIDwgcjsgbisrKSB+dGhpcy50cmFuc3BvcnRzLmluZGV4T2YodFtuXSkgJiYgZS5wdXNoKHRbbl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICApO1xuICAgICAgICB9KShSKTtcbiAgICB1dC5wcm90b2NvbCA9IDQ7XG4gICAgdmFyIGh0ID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBBcnJheUJ1ZmZlcixcbiAgICAgICAgZnQgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuICAgICAgICBsdCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgQmxvYiB8fCAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgQmxvYiAmJiBcIltvYmplY3QgQmxvYkNvbnN0cnVjdG9yXVwiID09PSBmdC5jYWxsKEJsb2IpKSxcbiAgICAgICAgcHQgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIEZpbGUgfHwgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEZpbGUgJiYgXCJbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl1cIiA9PT0gZnQuY2FsbChGaWxlKSk7XG4gICAgZnVuY3Rpb24gZHQodCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGh0ICYmXG4gICAgICAgICAgICAgICAgKHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fFxuICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA/IEFycmF5QnVmZmVyLmlzVmlldyh0KSA6IHQuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgIH0pKHQpKSkgfHxcbiAgICAgICAgICAgIChsdCAmJiB0IGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgICAgIChwdCAmJiB0IGluc3RhbmNlb2YgRmlsZSlcbiAgICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24geXQoZSwgbikge1xuICAgICAgICBpZiAoIWUgfHwgXCJvYmplY3RcIiAhPT0gdChlKSkgcmV0dXJuICExO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIG8gPSBlLmxlbmd0aDsgciA8IG87IHIrKykgaWYgKHl0KGVbcl0pKSByZXR1cm4gITA7XG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR0KGUpKSByZXR1cm4gITA7XG4gICAgICAgIGlmIChlLnRvSlNPTiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUudG9KU09OICYmIDEgPT09IGFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB5dChlLnRvSlNPTigpLCAhMCk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gZSkgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBpKSAmJiB5dChlW2ldKSkgcmV0dXJuICEwO1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZ0KHQpIHtcbiAgICAgICAgdmFyIGUgPSBbXSxcbiAgICAgICAgICAgIG4gPSB0LmRhdGEsXG4gICAgICAgICAgICByID0gdDtcbiAgICAgICAgcmV0dXJuIChyLmRhdGEgPSBtdChuLCBlKSksIChyLmF0dGFjaG1lbnRzID0gZS5sZW5ndGgpLCB7IHBhY2tldDogciwgYnVmZmVyczogZSB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtdChlLCBuKSB7XG4gICAgICAgIGlmICghZSkgcmV0dXJuIGU7XG4gICAgICAgIGlmIChkdChlKSkge1xuICAgICAgICAgICAgdmFyIHIgPSB7IF9wbGFjZWhvbGRlcjogITAsIG51bTogbi5sZW5ndGggfTtcbiAgICAgICAgICAgIHJldHVybiBuLnB1c2goZSksIHI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG8gPSBuZXcgQXJyYXkoZS5sZW5ndGgpLCBpID0gMDsgaSA8IGUubGVuZ3RoOyBpKyspIG9baV0gPSBtdChlW2ldLCBuKTtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0KGUpICYmICEoZSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgYSBpbiBlKSBlLmhhc093blByb3BlcnR5KGEpICYmIChzW2FdID0gbXQoZVthXSwgbikpO1xuICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGd0KHQsIGUpIHtcbiAgICAgICAgcmV0dXJuICh0LmRhdGEgPSBrdCh0LmRhdGEsIGUpKSwgKHQuYXR0YWNobWVudHMgPSB2b2lkIDApLCB0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBrdChlLCBuKSB7XG4gICAgICAgIGlmICghZSkgcmV0dXJuIGU7XG4gICAgICAgIGlmIChlICYmIGUuX3BsYWNlaG9sZGVyKSByZXR1cm4gbltlLm51bV07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSBmb3IgKHZhciByID0gMDsgciA8IGUubGVuZ3RoOyByKyspIGVbcl0gPSBrdChlW3JdLCBuKTtcbiAgICAgICAgZWxzZSBpZiAoXCJvYmplY3RcIiA9PT0gdChlKSkgZm9yICh2YXIgbyBpbiBlKSBlLmhhc093blByb3BlcnR5KG8pICYmIChlW29dID0ga3QoZVtvXSwgbikpO1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgdmFyIGJ0O1xuICAgICEoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgKHRbKHQuQ09OTkVDVCA9IDApXSA9IFwiQ09OTkVDVFwiKSxcbiAgICAgICAgICAgICh0Wyh0LkRJU0NPTk5FQ1QgPSAxKV0gPSBcIkRJU0NPTk5FQ1RcIiksXG4gICAgICAgICAgICAodFsodC5FVkVOVCA9IDIpXSA9IFwiRVZFTlRcIiksXG4gICAgICAgICAgICAodFsodC5BQ0sgPSAzKV0gPSBcIkFDS1wiKSxcbiAgICAgICAgICAgICh0Wyh0LkNPTk5FQ1RfRVJST1IgPSA0KV0gPSBcIkNPTk5FQ1RfRVJST1JcIiksXG4gICAgICAgICAgICAodFsodC5CSU5BUllfRVZFTlQgPSA1KV0gPSBcIkJJTkFSWV9FVkVOVFwiKSxcbiAgICAgICAgICAgICh0Wyh0LkJJTkFSWV9BQ0sgPSA2KV0gPSBcIkJJTkFSWV9BQ0tcIik7XG4gICAgfSkoYnQgfHwgKGJ0ID0ge30pKTtcbiAgICB2YXIgd3QgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgICAgICAgICBlKHRoaXMsIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICByKHQsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImVuY29kZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0LnR5cGUgIT09IGJ0LkVWRU5UICYmIHQudHlwZSAhPT0gYnQuQUNLKSB8fCAheXQodCkgPyBbdGhpcy5lbmNvZGVBc1N0cmluZyh0KV0gOiAoKHQudHlwZSA9IHQudHlwZSA9PT0gYnQuRVZFTlQgPyBidC5CSU5BUllfRVZFTlQgOiBidC5CSU5BUllfQUNLKSwgdGhpcy5lbmNvZGVBc0JpbmFyeSh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZW5jb2RlQXNTdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gXCJcIiArIHQudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC50eXBlICE9PSBidC5CSU5BUllfRVZFTlQgJiYgdC50eXBlICE9PSBidC5CSU5BUllfQUNLKSB8fCAoZSArPSB0LmF0dGFjaG1lbnRzICsgXCItXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5zcCAmJiBcIi9cIiAhPT0gdC5uc3AgJiYgKGUgKz0gdC5uc3AgKyBcIixcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT0gdC5pZCAmJiAoZSArPSB0LmlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSB0LmRhdGEgJiYgKGUgKz0gSlNPTi5zdHJpbmdpZnkodC5kYXRhKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImVuY29kZUFzQmluYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHZ0KHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5lbmNvZGVBc1N0cmluZyhlLnBhY2tldCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBlLmJ1ZmZlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIudW5zaGlmdChuKSwgcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSkoKSxcbiAgICAgICAgX3QgPSAoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIGkoYSwgbik7XG4gICAgICAgICAgICB2YXIgbyA9IGgoYSk7XG4gICAgICAgICAgICBmdW5jdGlvbiBhKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMsIGEpLCBvLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHIoXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiYWRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlID0gdGhpcy5kZWNvZGVTdHJpbmcodCkpLnR5cGUgPT09IGJ0LkJJTkFSWV9FVkVOVCB8fCBlLnR5cGUgPT09IGJ0LkJJTkFSWV9BQ0tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgodGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEV0KGUpKSwgMCA9PT0gZS5hdHRhY2htZW50cyAmJiBmKHMoYS5wcm90b3R5cGUpLCBcImVtaXRSZXNlcnZlZFwiLCB0aGlzKS5jYWxsKHRoaXMsIFwiZGVjb2RlZFwiLCBlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGYocyhhLnByb3RvdHlwZSksIFwiZW1pdFJlc2VydmVkXCIsIHRoaXMpLmNhbGwodGhpcywgXCJkZWNvZGVkXCIsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZHQodCkgJiYgIXQuYmFzZTY0KSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3RvcikgdGhyb3cgbmV3IEVycm9yKFwiZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEodCkpICYmICgodGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbCksIGYocyhhLnByb3RvdHlwZSksIFwiZW1pdFJlc2VydmVkXCIsIHRoaXMpLmNhbGwodGhpcywgXCJkZWNvZGVkXCIsIGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJkZWNvZGVTdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHsgdHlwZTogTnVtYmVyKHQuY2hhckF0KDApKSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBidFtuLnR5cGVdKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHBhY2tldCB0eXBlIFwiICsgbi50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4udHlwZSA9PT0gYnQuQklOQVJZX0VWRU5UIHx8IG4udHlwZSA9PT0gYnQuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IGUgKyAxOyBcIi1cIiAhPT0gdC5jaGFyQXQoKytlKSAmJiBlICE9IHQubGVuZ3RoOyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0LnN1YnN0cmluZyhyLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvICE9IE51bWJlcihvKSB8fCBcIi1cIiAhPT0gdC5jaGFyQXQoZSkpIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgYXR0YWNobWVudHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmF0dGFjaG1lbnRzID0gTnVtYmVyKG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIi9cIiA9PT0gdC5jaGFyQXQoZSArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZSArIDE7ICsrZTsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiLFwiID09PSB0LmNoYXJBdChlKSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPT09IHQubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ubnNwID0gdC5zdWJzdHJpbmcoaSwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBuLm5zcCA9IFwiL1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHQuY2hhckF0KGUgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiXCIgIT09IHMgJiYgTnVtYmVyKHMpID09IHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSBlICsgMTsgKytlOyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHQuY2hhckF0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IHUgfHwgTnVtYmVyKHUpICE9IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPT09IHQubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uaWQgPSBOdW1iZXIodC5zdWJzdHJpbmcoYywgZSArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5jaGFyQXQoKytlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSh0LnN1YnN0cihlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWEuaXNQYXlsb2FkVmFsaWQobi50eXBlLCBoKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXlsb2FkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5kYXRhID0gaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciAmJiB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImlzUGF5bG9hZFZhbGlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBidC5DT05ORUNUOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdFwiID09PSB0KG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBidC5ESVNDT05ORUNUOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IG47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGJ0LkNPTk5FQ1RfRVJST1I6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIG4gfHwgXCJvYmplY3RcIiA9PT0gdChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYnQuRVZFTlQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGJ0LkJJTkFSWV9FVkVOVDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShuKSAmJiBuLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGJ0LkFDSzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYnQuQklOQVJZX0FDSzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBhXG4gICAgICAgICAgICApO1xuICAgICAgICB9KShSKTtcbiAgICB2YXIgRXQgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gdChuKSB7XG4gICAgICAgICAgICAgICAgZSh0aGlzLCB0KSwgKHRoaXMucGFja2V0ID0gbiksICh0aGlzLmJ1ZmZlcnMgPSBbXSksICh0aGlzLnJlY29uUGFjayA9IG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICByKHQsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInRha2VCaW5hcnlEYXRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRoaXMuYnVmZmVycy5wdXNoKHQpLCB0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBndCh0aGlzLnJlY29uUGFjaywgdGhpcy5idWZmZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpLCBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJmaW5pc2hlZFJlY29uc3RydWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnJlY29uUGFjayA9IG51bGwpLCAodGhpcy5idWZmZXJzID0gW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICB0XG4gICAgICAgICAgICApO1xuICAgICAgICB9KSgpLFxuICAgICAgICBBdCA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgX19wcm90b19fOiBudWxsLFxuICAgICAgICAgICAgcHJvdG9jb2w6IDUsXG4gICAgICAgICAgICBnZXQgUGFja2V0VHlwZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRW5jb2Rlcjogd3QsXG4gICAgICAgICAgICBEZWNvZGVyOiBfdCxcbiAgICAgICAgfSk7XG4gICAgZnVuY3Rpb24gUnQodCwgZSwgbikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdC5vbihlLCBuKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0Lm9mZihlLCBuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG4gICAgdmFyIFR0ID0gT2JqZWN0LmZyZWV6ZSh7IGNvbm5lY3Q6IDEsIGNvbm5lY3RfZXJyb3I6IDEsIGRpc2Nvbm5lY3Q6IDEsIGRpc2Nvbm5lY3Rpbmc6IDEsIG5ld0xpc3RlbmVyOiAxLCByZW1vdmVMaXN0ZW5lcjogMSB9KSxcbiAgICAgICAgQ3QgPSAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGkobywgdCk7XG4gICAgICAgICAgICB2YXIgbiA9IGgobyk7XG4gICAgICAgICAgICBmdW5jdGlvbiBvKHQsIHIsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcztcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBlKHRoaXMsIG8pLFxuICAgICAgICAgICAgICAgICAgICAoKHMgPSBuLmNhbGwodGhpcykpLmNvbm5lY3RlZCA9ICExKSxcbiAgICAgICAgICAgICAgICAgICAgKHMuZGlzY29ubmVjdGVkID0gITApLFxuICAgICAgICAgICAgICAgICAgICAocy5yZWNlaXZlQnVmZmVyID0gW10pLFxuICAgICAgICAgICAgICAgICAgICAocy5zZW5kQnVmZmVyID0gW10pLFxuICAgICAgICAgICAgICAgICAgICAocy5pZHMgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgKHMuYWNrcyA9IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgKHMuZmxhZ3MgPSB7fSksXG4gICAgICAgICAgICAgICAgICAgIChzLmlvID0gdCksXG4gICAgICAgICAgICAgICAgICAgIChzLm5zcCA9IHIpLFxuICAgICAgICAgICAgICAgICAgICBpICYmIGkuYXV0aCAmJiAocy5hdXRoID0gaS5hdXRoKSxcbiAgICAgICAgICAgICAgICAgICAgcy5pby5fYXV0b0Nvbm5lY3QgJiYgcy5vcGVuKCksXG4gICAgICAgICAgICAgICAgICAgIHNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICByKG8sIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInN1YkV2ZW50c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc3Vicykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuaW87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VicyA9IFtSdCh0LCBcIm9wZW5cIiwgdGhpcy5vbm9wZW4uYmluZCh0aGlzKSksIFJ0KHQsIFwicGFja2V0XCIsIHRoaXMub25wYWNrZXQuYmluZCh0aGlzKSksIFJ0KHQsIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLCBSdCh0LCBcImNsb3NlXCIsIHRoaXMub25jbG9zZS5iaW5kKHRoaXMpKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImFjdGl2ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5zdWJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImNvbm5lY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGVkIHx8ICh0aGlzLnN1YkV2ZW50cygpLCB0aGlzLmlvLl9yZWNvbm5lY3RpbmcgfHwgdGhpcy5pby5vcGVuKCksIFwib3BlblwiID09PSB0aGlzLmlvLl9yZWFkeVN0YXRlICYmIHRoaXMub25vcGVuKCkpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9wZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInNlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGgsIGUgPSBuZXcgQXJyYXkodCksIG4gPSAwOyBuIDwgdDsgbisrKSBlW25dID0gYXJndW1lbnRzW25dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnVuc2hpZnQoXCJtZXNzYWdlXCIpLCB0aGlzLmVtaXQuYXBwbHkodGhpcywgZSksIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZW1pdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFR0Lmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHQgKyAnXCIgaXMgYSByZXNlcnZlZCBldmVudCBuYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGgsIG4gPSBuZXcgQXJyYXkoZSA+IDEgPyBlIC0gMSA6IDApLCByID0gMTsgciA8IGU7IHIrKykgbltyIC0gMV0gPSBhcmd1bWVudHNbcl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi51bnNoaWZ0KHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0geyB0eXBlOiBidC5FVkVOVCwgZGF0YTogbiwgb3B0aW9uczoge30gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKChvLm9wdGlvbnMuY29tcHJlc3MgPSAhMSAhPT0gdGhpcy5mbGFncy5jb21wcmVzcyksIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbltuLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuaWRzKyssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gbi5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJBY2tDYWxsYmFjayhpLCBzKSwgKG8uaWQgPSBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmlvLmVuZ2luZSAmJiB0aGlzLmlvLmVuZ2luZS50cmFuc3BvcnQgJiYgdGhpcy5pby5lbmdpbmUudHJhbnNwb3J0LndyaXRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gdGhpcy5mbGFncy52b2xhdGlsZSAmJiAoIWEgfHwgIXRoaXMuY29ubmVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyB8fCAodGhpcy5jb25uZWN0ZWQgPyB0aGlzLnBhY2tldChvKSA6IHRoaXMuc2VuZEJ1ZmZlci5wdXNoKG8pKSwgKHRoaXMuZmxhZ3MgPSB7fSksIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiX3JlZ2lzdGVyQWNrQ2FsbGJhY2tcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMuZmxhZ3MudGltZW91dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gdGhpcy5pby5zZXRUaW1lb3V0Rm4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG4uYWNrc1t0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgbi5zZW5kQnVmZmVyLmxlbmd0aDsgcisrKSBuLnNlbmRCdWZmZXJbcl0uaWQgPT09IHQgJiYgbi5zZW5kQnVmZmVyLnNwbGljZShyLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY2FsbChuLCBuZXcgRXJyb3IoXCJvcGVyYXRpb24gaGFzIHRpbWVkIG91dFwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFja3NbdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmlvLmNsZWFyVGltZW91dEZuKG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBuZXcgQXJyYXkodCksIGkgPSAwOyBpIDwgdDsgaSsrKSByW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5hcHBseShuLCBbbnVsbF0uY29uY2F0KHIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5hY2tzW3RdID0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJwYWNrZXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0Lm5zcCA9IHRoaXMubnNwKSwgdGhpcy5pby5fcGFja2V0KHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9ub3BlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0aGlzLmF1dGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmF1dGgoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wYWNrZXQoeyB0eXBlOiBidC5DT05ORUNULCBkYXRhOiBlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5wYWNrZXQoeyB0eXBlOiBidC5DT05ORUNULCBkYXRhOiB0aGlzLmF1dGggfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25lcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgfHwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0X2Vycm9yXCIsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uY2xvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmNvbm5lY3RlZCA9ICExKSwgKHRoaXMuZGlzY29ubmVjdGVkID0gITApLCBkZWxldGUgdGhpcy5pZCwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJkaXNjb25uZWN0XCIsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9ucGFja2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5uc3AgPT09IHRoaXMubnNwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBidC5DT05ORUNUOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmRhdGEgJiYgdC5kYXRhLnNpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQuZGF0YS5zaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25jb25uZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29ubmVjdF9lcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiSXQgc2VlbXMgeW91IGFyZSB0cnlpbmcgdG8gcmVhY2ggYSBTb2NrZXQuSU8gc2VydmVyIGluIHYyLnggd2l0aCBhIHYzLnggY2xpZW50LCBidXQgdGhleSBhcmUgbm90IGNvbXBhdGlibGUgKG1vcmUgaW5mb3JtYXRpb24gaGVyZTogaHR0cHM6Ly9zb2NrZXQuaW8vZG9jcy92My9taWdyYXRpbmctZnJvbS0yLXgtdG8tMy0wLylcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBidC5FVkVOVDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYnQuQklOQVJZX0VWRU5UOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25ldmVudCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYnQuQUNLOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBidC5CSU5BUllfQUNLOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25hY2sodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGJ0LkRJU0NPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYnQuQ09OTkVDVF9FUlJPUjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyBFcnJvcih0LmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG4uZGF0YSA9IHQuZGF0YS5kYXRhKSwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0X2Vycm9yXCIsIG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25ldmVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LmRhdGEgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSB0LmlkICYmIGUucHVzaCh0aGlzLmFjayh0LmlkKSksIHRoaXMuY29ubmVjdGVkID8gdGhpcy5lbWl0RXZlbnQoZSkgOiB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChPYmplY3QuZnJlZXplKGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJlbWl0RXZlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hbnlMaXN0ZW5lcnMgJiYgdGhpcy5fYW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBwKHRoaXMuX2FueUxpc3RlbmVycy5zbGljZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobi5zKCk7ICEoZSA9IG4ubigpKS5kb25lOyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZhbHVlLmFwcGx5KHRoaXMsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmUodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmKHMoby5wcm90b3R5cGUpLCBcImVtaXRcIiwgdGhpcykuYXBwbHkodGhpcywgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiYWNrXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoLCBvID0gbmV3IEFycmF5KHIpLCBpID0gMDsgaSA8IHI7IGkrKykgb1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucGFja2V0KHsgdHlwZTogYnQuQUNLLCBpZDogdCwgZGF0YTogbyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25hY2tcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5hY2tzW3QuaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSAmJiAoZS5hcHBseSh0aGlzLCB0LmRhdGEpLCBkZWxldGUgdGhpcy5hY2tzW3QuaWRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbmNvbm5lY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmlkID0gdCksICh0aGlzLmNvbm5lY3RlZCA9ICEwKSwgKHRoaXMuZGlzY29ubmVjdGVkID0gITEpLCB0aGlzLmVtaXRCdWZmZXJlZCgpLCB0aGlzLmVtaXRSZXNlcnZlZChcImNvbm5lY3RcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZW1pdEJ1ZmZlcmVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5lbWl0RXZlbnQoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5wYWNrZXQoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5zZW5kQnVmZmVyID0gW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uZGlzY29ubmVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKSwgdGhpcy5vbmNsb3NlKFwiaW8gc2VydmVyIGRpc2Nvbm5lY3RcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuc3Vicy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuc3VicyA9IHZvaWQgMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlvLl9kZXN0cm95KHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImRpc2Nvbm5lY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGVkICYmIHRoaXMucGFja2V0KHsgdHlwZTogYnQuRElTQ09OTkVDVCB9KSwgdGhpcy5kZXN0cm95KCksIHRoaXMuY29ubmVjdGVkICYmIHRoaXMub25jbG9zZShcImlvIGNsaWVudCBkaXNjb25uZWN0XCIpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImNsb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJjb21wcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmZsYWdzLmNvbXByZXNzID0gdCksIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwidm9sYXRpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5mbGFncy52b2xhdGlsZSA9ICEwKSwgdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJ0aW1lb3V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZmxhZ3MudGltZW91dCA9IHQpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uQW55XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2FueUxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXSksIHRoaXMuX2FueUxpc3RlbmVycy5wdXNoKHQpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInByZXBlbmRBbnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fYW55TGlzdGVuZXJzID0gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdKSwgdGhpcy5fYW55TGlzdGVuZXJzLnVuc2hpZnQodCksIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib2ZmQW55XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2FueUxpc3RlbmVycykgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IHRoaXMuX2FueUxpc3RlbmVycywgbiA9IDA7IG4gPCBlLmxlbmd0aDsgbisrKSBpZiAodCA9PT0gZVtuXSkgcmV0dXJuIGUuc3BsaWNlKG4sIDEpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLl9hbnlMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJsaXN0ZW5lcnNBbnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgb1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSkoUiksXG4gICAgICAgIE90ID0gU3Q7XG4gICAgZnVuY3Rpb24gU3QodCkge1xuICAgICAgICAodCA9IHQgfHwge30pLCAodGhpcy5tcyA9IHQubWluIHx8IDEwMCksICh0aGlzLm1heCA9IHQubWF4IHx8IDFlNCksICh0aGlzLmZhY3RvciA9IHQuZmFjdG9yIHx8IDIpLCAodGhpcy5qaXR0ZXIgPSB0LmppdHRlciA+IDAgJiYgdC5qaXR0ZXIgPD0gMSA/IHQuaml0dGVyIDogMCksICh0aGlzLmF0dGVtcHRzID0gMCk7XG4gICAgfVxuICAgIChTdC5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICAgICAgICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICAgICAgICAgIHZhciBlID0gTWF0aC5yYW5kb20oKSxcbiAgICAgICAgICAgICAgICBuID0gTWF0aC5mbG9vcihlICogdGhpcy5qaXR0ZXIgKiB0KTtcbiAgICAgICAgICAgIHQgPSAwID09ICgxICYgTWF0aC5mbG9vcigxMCAqIGUpKSA/IHQgLSBuIDogdCArIG47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDAgfCBNYXRoLm1pbih0LCB0aGlzLm1heCk7XG4gICAgfSksXG4gICAgICAgIChTdC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmF0dGVtcHRzID0gMDtcbiAgICAgICAgfSksXG4gICAgICAgIChTdC5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHRoaXMubXMgPSB0O1xuICAgICAgICB9KSxcbiAgICAgICAgKFN0LnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdGhpcy5tYXggPSB0O1xuICAgICAgICB9KSxcbiAgICAgICAgKFN0LnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdGhpcy5qaXR0ZXIgPSB0O1xuICAgICAgICB9KTtcbiAgICB2YXIgQnQgPSAoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIGkocywgbik7XG4gICAgICAgICAgICB2YXIgbyA9IGgocyk7XG4gICAgICAgICAgICBmdW5jdGlvbiBzKG4sIHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSwgYTtcbiAgICAgICAgICAgICAgICBlKHRoaXMsIHMpLFxuICAgICAgICAgICAgICAgICAgICAoKGkgPSBvLmNhbGwodGhpcykpLm5zcHMgPSB7fSksXG4gICAgICAgICAgICAgICAgICAgIChpLnN1YnMgPSBbXSksXG4gICAgICAgICAgICAgICAgICAgIG4gJiYgXCJvYmplY3RcIiA9PT0gdChuKSAmJiAoKHIgPSBuKSwgKG4gPSB2b2lkIDApKSxcbiAgICAgICAgICAgICAgICAgICAgKChyID0gciB8fCB7fSkucGF0aCA9IHIucGF0aCB8fCBcIi9zb2NrZXQuaW9cIiksXG4gICAgICAgICAgICAgICAgICAgIChpLm9wdHMgPSByKSxcbiAgICAgICAgICAgICAgICAgICAgQShjKGkpLCByKSxcbiAgICAgICAgICAgICAgICAgICAgaS5yZWNvbm5lY3Rpb24oITEgIT09IHIucmVjb25uZWN0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgaS5yZWNvbm5lY3Rpb25BdHRlbXB0cyhyLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IDEgLyAwKSxcbiAgICAgICAgICAgICAgICAgICAgaS5yZWNvbm5lY3Rpb25EZWxheShyLnJlY29ubmVjdGlvbkRlbGF5IHx8IDFlMyksXG4gICAgICAgICAgICAgICAgICAgIGkucmVjb25uZWN0aW9uRGVsYXlNYXgoci5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1ZTMpLFxuICAgICAgICAgICAgICAgICAgICBpLnJhbmRvbWl6YXRpb25GYWN0b3IobnVsbCAhPT0gKGEgPSByLnJhbmRvbWl6YXRpb25GYWN0b3IpICYmIHZvaWQgMCAhPT0gYSA/IGEgOiAwLjUpLFxuICAgICAgICAgICAgICAgICAgICAoaS5iYWNrb2ZmID0gbmV3IE90KHsgbWluOiBpLnJlY29ubmVjdGlvbkRlbGF5KCksIG1heDogaS5yZWNvbm5lY3Rpb25EZWxheU1heCgpLCBqaXR0ZXI6IGkucmFuZG9taXphdGlvbkZhY3RvcigpIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgaS50aW1lb3V0KG51bGwgPT0gci50aW1lb3V0ID8gMmU0IDogci50aW1lb3V0KSxcbiAgICAgICAgICAgICAgICAgICAgKGkuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgKGkudXJpID0gbik7XG4gICAgICAgICAgICAgICAgdmFyIHUgPSByLnBhcnNlciB8fCBBdDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGkuZW5jb2RlciA9IG5ldyB1LkVuY29kZXIoKSksIChpLmRlY29kZXIgPSBuZXcgdS5EZWNvZGVyKCkpLCAoaS5fYXV0b0Nvbm5lY3QgPSAhMSAhPT0gci5hdXRvQ29ubmVjdCksIGkuX2F1dG9Db25uZWN0ICYmIGkub3BlbigpLCBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICByKHMsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInJlY29ubmVjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdCksIHRoaXMpIDogdGhpcy5fcmVjb25uZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInJlY29ubmVjdGlvbkF0dGVtcHRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0ID8gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMgOiAoKHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdCksIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInJlY29ubmVjdGlvbkRlbGF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0ID8gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgOiAoKHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdCksIG51bGwgPT09IChlID0gdGhpcy5iYWNrb2ZmKSB8fCB2b2lkIDAgPT09IGUgfHwgZS5zZXRNaW4odCksIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInJhbmRvbWl6YXRpb25GYWN0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHQgPyB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yIDogKCh0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yID0gdCksIG51bGwgPT09IChlID0gdGhpcy5iYWNrb2ZmKSB8fCB2b2lkIDAgPT09IGUgfHwgZS5zZXRKaXR0ZXIodCksIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInJlY29ubmVjdGlvbkRlbGF5TWF4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0ID8gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXggOiAoKHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdCksIG51bGwgPT09IChlID0gdGhpcy5iYWNrb2ZmKSB8fCB2b2lkIDAgPT09IGUgfHwgZS5zZXRNYXgodCksIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInRpbWVvdXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKCh0aGlzLl90aW1lb3V0ID0gdCksIHRoaXMpIDogdGhpcy5fdGltZW91dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJtYXliZVJlY29ubmVjdE9uT3BlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5fcmVjb25uZWN0aW5nICYmIHRoaXMuX3JlY29ubmVjdGlvbiAmJiAwID09PSB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgJiYgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvcGVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKH50aGlzLl9yZWFkeVN0YXRlLmluZGV4T2YoXCJvcGVuXCIpKSByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZ2luZSA9IG5ldyB1dCh0aGlzLnVyaSwgdGhpcy5vcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMuZW5naW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiKSwgKHRoaXMuc2tpcFJlY29ubmVjdCA9ICExKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IFJ0KG4sIFwib3BlblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLm9ub3BlbigpLCB0ICYmIHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBSdChuLCBcImVycm9yXCIsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmNsZWFudXAoKSwgKHIuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiKSwgZS5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBuKSwgdCA/IHQobikgOiByLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghMSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMuX3RpbWVvdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgPT09IHMgJiYgbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuc2V0VGltZW91dEZuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8oKSwgbi5jbG9zZSgpLCBuLmVtaXQoXCJlcnJvclwiLCBuZXcgRXJyb3IoXCJ0aW1lb3V0XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0cy5hdXRvVW5yZWYgJiYgYS51bnJlZigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJzLnB1c2gobyksIHRoaXMuc3Vicy5wdXNoKGkpLCB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImNvbm5lY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW4odCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25vcGVuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cCgpLCAodGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlblwiKSwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJvcGVuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5lbmdpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ0KHQsIFwicGluZ1wiLCB0aGlzLm9ucGluZy5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUnQodCwgXCJkYXRhXCIsIHRoaXMub25kYXRhLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSdCh0LCBcImVycm9yXCIsIHRoaXMub25lcnJvci5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUnQodCwgXCJjbG9zZVwiLCB0aGlzLm9uY2xvc2UuYmluZCh0aGlzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ0KHRoaXMuZGVjb2RlciwgXCJkZWNvZGVkXCIsIHRoaXMub25kZWNvZGVkLmJpbmQodGhpcykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbnBpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwaW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uZGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWNvZGVyLmFkZCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJvbmRlY29kZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGFja2V0XCIsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIm9uZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwic29ja2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMubnNwc1t0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiB8fCAoKG4gPSBuZXcgQ3QodGhpcywgdCwgZSkpLCAodGhpcy5uc3BzW3RdID0gbikpLCBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcIl9kZXN0cm95XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gMCwgbiA9IE9iamVjdC5rZXlzKHRoaXMubnNwcyk7IGUgPCBuLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gbltlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubnNwc1tyXS5hY3RpdmUpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJfcGFja2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gdGhpcy5lbmNvZGVyLmVuY29kZSh0KSwgbiA9IDA7IG4gPCBlLmxlbmd0aDsgbisrKSB0aGlzLmVuZ2luZS53cml0ZShlW25dLCB0Lm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImNsZWFudXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuc3Vicy5sZW5ndGggPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJfY2xvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuc2tpcFJlY29ubmVjdCA9ICEwKSwgKHRoaXMuX3JlY29ubmVjdGluZyA9ICExKSwgdGhpcy5vbmNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpLCB0aGlzLmVuZ2luZSAmJiB0aGlzLmVuZ2luZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImRpc2Nvbm5lY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25jbG9zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwKCksIHRoaXMuYmFja29mZi5yZXNldCgpLCAodGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCIpLCB0aGlzLmVtaXRSZXNlcnZlZChcImNsb3NlXCIsIHQpLCB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCAmJiB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInJlY29ubmVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB0aGlzLmJhY2tvZmYucmVzZXQoKSwgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZmFpbGVkXCIpLCAodGhpcy5fcmVjb25uZWN0aW5nID0gITEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnNldFRpbWVvdXRGbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNraXBSZWNvbm5lY3QgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodC5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfYXR0ZW1wdFwiLCBlLmJhY2tvZmYuYXR0ZW1wdHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2tpcFJlY29ubmVjdCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLm9wZW4oZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPyAoKGUuX3JlY29ubmVjdGluZyA9ICExKSwgZS5yZWNvbm5lY3QoKSwgdC5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZXJyb3JcIiwgbikpIDogZS5vbnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHMuYXV0b1VucmVmICYmIHIudW5yZWYoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vicy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQocik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwib25yZWNvbm5lY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmJhY2tvZmYuYXR0ZW1wdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuX3JlY29ubmVjdGluZyA9ICExKSwgdGhpcy5iYWNrb2ZmLnJlc2V0KCksIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0XCIsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBzXG4gICAgICAgICAgICApO1xuICAgICAgICB9KShSKSxcbiAgICAgICAgTnQgPSB7fTtcbiAgICBmdW5jdGlvbiB4dChlLCBuKSB7XG4gICAgICAgIFwib2JqZWN0XCIgPT09IHQoZSkgJiYgKChuID0gZSksIChlID0gdm9pZCAwKSk7XG4gICAgICAgIHZhciByLFxuICAgICAgICAgICAgbyA9IChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMV0gPyBhcmd1bWVudHNbMV0gOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBuID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0O1xuICAgICAgICAgICAgICAgIChuID0gbiB8fCAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgbG9jYXRpb24gJiYgbG9jYXRpb24pKSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PSB0ICYmICh0ID0gbi5wcm90b2NvbCArIFwiLy9cIiArIG4uaG9zdCksXG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgKFwiL1wiID09PSB0LmNoYXJBdCgwKSAmJiAodCA9IFwiL1wiID09PSB0LmNoYXJBdCgxKSA/IG4ucHJvdG9jb2wgKyB0IDogbi5ob3N0ICsgdCksIC9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodCkgfHwgKHQgPSB2b2lkIDAgIT09IG4gPyBuLnByb3RvY29sICsgXCIvL1wiICsgdCA6IFwiaHR0cHM6Ly9cIiArIHQpLCAociA9IHYodCkpKSxcbiAgICAgICAgICAgICAgICAgICAgci5wb3J0IHx8ICgvXihodHRwfHdzKSQvLnRlc3Qoci5wcm90b2NvbCkgPyAoci5wb3J0ID0gXCI4MFwiKSA6IC9eKGh0dHB8d3MpcyQvLnRlc3Qoci5wcm90b2NvbCkgJiYgKHIucG9ydCA9IFwiNDQzXCIpKSxcbiAgICAgICAgICAgICAgICAgICAgKHIucGF0aCA9IHIucGF0aCB8fCBcIi9cIik7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSAtMSAhPT0gci5ob3N0LmluZGV4T2YoXCI6XCIpID8gXCJbXCIgKyByLmhvc3QgKyBcIl1cIiA6IHIuaG9zdDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHIuaWQgPSByLnByb3RvY29sICsgXCI6Ly9cIiArIG8gKyBcIjpcIiArIHIucG9ydCArIGUpLCAoci5ocmVmID0gci5wcm90b2NvbCArIFwiOi8vXCIgKyBvICsgKG4gJiYgbi5wb3J0ID09PSByLnBvcnQgPyBcIlwiIDogXCI6XCIgKyByLnBvcnQpKSwgcjtcbiAgICAgICAgICAgIH0pKGUsIChuID0gbiB8fCB7fSkucGF0aCB8fCBcIi9zb2NrZXQuaW9cIiksXG4gICAgICAgICAgICBpID0gby5zb3VyY2UsXG4gICAgICAgICAgICBzID0gby5pZCxcbiAgICAgICAgICAgIGEgPSBvLnBhdGgsXG4gICAgICAgICAgICBjID0gTnRbc10gJiYgYSBpbiBOdFtzXS5uc3BzO1xuICAgICAgICByZXR1cm4gbi5mb3JjZU5ldyB8fCBuW1wiZm9yY2UgbmV3IGNvbm5lY3Rpb25cIl0gfHwgITEgPT09IG4ubXVsdGlwbGV4IHx8IGMgPyAociA9IG5ldyBCdChpLCBuKSkgOiAoTnRbc10gfHwgKE50W3NdID0gbmV3IEJ0KGksIG4pKSwgKHIgPSBOdFtzXSkpLCBvLnF1ZXJ5ICYmICFuLnF1ZXJ5ICYmIChuLnF1ZXJ5ID0gby5xdWVyeUtleSksIHIuc29ja2V0KG8ucGF0aCwgbik7XG4gICAgfVxuICAgIHJldHVybiBvKHh0LCB7IE1hbmFnZXI6IEJ0LCBTb2NrZXQ6IEN0LCBpbzogeHQsIGNvbm5lY3Q6IHh0IH0pLCB4dDtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c29ja2V0LmlvLm1pbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ0IiwiZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJnbG9iYWxUaGlzIiwic2VsZiIsImlvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIlR5cGVFcnJvciIsIm4iLCJsZW5ndGgiLCJyIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJvIiwiYXNzaWduIiwiYXJndW1lbnRzIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJpIiwiY3JlYXRlIiwidmFsdWUiLCJhIiwicyIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJjIiwiUmVmZXJlbmNlRXJyb3IiLCJ1IiwiaCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsImYiLCJnZXQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJsIiwiQXJyYXkiLCJwIiwiaXNBcnJheSIsInRvU3RyaW5nIiwic2xpY2UiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJkb25lIiwibmV4dCIsImQiLCJ5IiwidiIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJyZXBsYWNlIiwiZXhlYyIsInNvdXJjZSIsImhvc3QiLCJhdXRob3JpdHkiLCJpcHY2dXJpIiwicGF0aE5hbWVzIiwic3BsaXQiLCJzdWJzdHIiLCJzcGxpY2UiLCJwYXRoIiwicXVlcnlLZXkiLCJxdWVyeSIsIm0iLCJYTUxIdHRwUmVxdWVzdCIsImciLCJrIiwid2luZG93IiwiRnVuY3Rpb24iLCJiIiwieGRvbWFpbiIsImNvbmNhdCIsImpvaW4iLCJ3IiwicmVkdWNlIiwiXyIsInNldFRpbWVvdXQiLCJFIiwiY2xlYXJUaW1lb3V0IiwiQSIsInVzZU5hdGl2ZVRpbWVycyIsInNldFRpbWVvdXRGbiIsImJpbmQiLCJjbGVhclRpbWVvdXRGbiIsIlIiLCJUIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiX2NhbGxiYWNrcyIsInB1c2giLCJvbmNlIiwib2ZmIiwiZm4iLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbWl0IiwiZW1pdFJlc2VydmVkIiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwiQyIsIm9wZW4iLCJjbG9zZSIsInBpbmciLCJwb25nIiwibWVzc2FnZSIsInVwZ3JhZGUiLCJub29wIiwiTyIsImtleXMiLCJmb3JFYWNoIiwiUyIsInR5cGUiLCJkYXRhIiwiQiIsIkJsb2IiLCJOIiwiQXJyYXlCdWZmZXIiLCJ4IiwiTCIsImlzVmlldyIsImJ1ZmZlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwiaiIsIlAiLCJVaW50OEFycmF5IiwicSIsImNoYXJDb2RlQXQiLCJEIiwiSSIsIkYiLCJVIiwiY2hhckF0IiwiTSIsImJhc2U2NCIsIlYiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJIIiwib3B0cyIsInJlYWR5U3RhdGUiLCJzb2NrZXQiLCJFcnJvciIsImRlc2NyaXB0aW9uIiwiZG9PcGVuIiwiZG9DbG9zZSIsIm9uQ2xvc2UiLCJ3cml0ZSIsImJpbmFyeVR5cGUiLCJvblBhY2tldCIsIksiLCJZIiwieiIsIiQiLCJXIiwiTWF0aCIsImZsb29yIiwiSiIsIkRhdGUiLCJlbmNvZGUiLCJkZWNvZGUiLCJYIiwiRyIsImVuY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsIlEiLCJwb2xsaW5nIiwicG9sbCIsImRvUG9sbCIsIm9uT3BlbiIsImRvV3JpdGUiLCJzZWN1cmUiLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsInRpbWVzdGFtcFBhcmFtIiwic3VwcG9ydHNCaW5hcnkiLCJzaWQiLCJiNjQiLCJwb3J0IiwiTnVtYmVyIiwiaG9zdG5hbWUiLCJaIiwidHQiLCJyZXNwb25zZVR5cGUiLCJldCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJ4ZCIsInhzIiwiZm9yY2VCYXNlNjQiLCJudCIsInVyaSIsInJlcXVlc3QiLCJtZXRob2QiLCJvbkVycm9yIiwib25EYXRhIiwicG9sbFhociIsImFzeW5jIiwieHNjaGVtZSIsInhociIsImV4dHJhSGVhZGVycyIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXF1ZXN0VGltZW91dCIsInRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJzdGF0dXMiLCJvbkxvYWQiLCJzZW5kIiwiZG9jdW1lbnQiLCJpbmRleCIsInJlcXVlc3RzQ291bnQiLCJyZXF1ZXN0cyIsImNsZWFudXAiLCJvblN1Y2Nlc3MiLCJhYm9ydCIsInJlc3BvbnNlVGV4dCIsImF0dGFjaEV2ZW50IiwicnQiLCJvdCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIml0IiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0Iiwic3QiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwidG9Mb3dlckNhc2UiLCJhdCIsImNoZWNrIiwicHJvdG9jb2xzIiwiaGVhZGVycyIsIndzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbm9wZW4iLCJhdXRvVW5yZWYiLCJfc29ja2V0IiwidW5yZWYiLCJvbmNsb3NlIiwib25tZXNzYWdlIiwib25lcnJvciIsImN0Iiwid2Vic29ja2V0IiwidXQiLCJ0cmFuc3BvcnRzIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwiYWdlbnQiLCJyZW1lbWJlclVwZ3JhZGUiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInRyYW5zcG9ydE9wdGlvbnMiLCJjbG9zZU9uQmVmb3JldW5sb2FkIiwiaWQiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ1RpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsIm9mZmxpbmVFdmVudExpc3RlbmVyIiwiRUlPIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiY3JlYXRlVHJhbnNwb3J0Iiwic2hpZnQiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwidXBncmFkaW5nIiwicGF1c2UiLCJmbHVzaCIsInByb2JlIiwib25IYW5kc2hha2UiLCJKU09OIiwicGFyc2UiLCJyZXNldFBpbmdUaW1lb3V0Iiwic2VuZFBhY2tldCIsImNvZGUiLCJmaWx0ZXJVcGdyYWRlcyIsImNvbXByZXNzIiwib3B0aW9ucyIsImh0IiwiZnQiLCJsdCIsInB0IiwiRmlsZSIsImR0IiwieXQiLCJ0b0pTT04iLCJ2dCIsIm10IiwiYXR0YWNobWVudHMiLCJwYWNrZXQiLCJidWZmZXJzIiwiX3BsYWNlaG9sZGVyIiwibnVtIiwiZ3QiLCJrdCIsImJ0IiwiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJFVkVOVCIsIkFDSyIsIkNPTk5FQ1RfRVJST1IiLCJCSU5BUllfRVZFTlQiLCJCSU5BUllfQUNLIiwid3QiLCJlbmNvZGVBc1N0cmluZyIsImVuY29kZUFzQmluYXJ5IiwibnNwIiwic3RyaW5naWZ5IiwidW5zaGlmdCIsIl90IiwiZGVjb2RlU3RyaW5nIiwicmVjb25zdHJ1Y3RvciIsIkV0IiwidGFrZUJpbmFyeURhdGEiLCJpc1BheWxvYWRWYWxpZCIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJyZWNvblBhY2siLCJBdCIsImZyZWV6ZSIsIlBhY2tldFR5cGUiLCJFbmNvZGVyIiwiRGVjb2RlciIsIlJ0IiwiVHQiLCJjb25uZWN0IiwiY29ubmVjdF9lcnJvciIsImRpc2Nvbm5lY3QiLCJkaXNjb25uZWN0aW5nIiwibmV3TGlzdGVuZXIiLCJDdCIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiaWRzIiwiYWNrcyIsImZsYWdzIiwiYXV0aCIsIl9hdXRvQ29ubmVjdCIsInN1YnMiLCJvbnBhY2tldCIsInN1YkV2ZW50cyIsIl9yZWNvbm5lY3RpbmciLCJfcmVhZHlTdGF0ZSIsInBvcCIsIl9yZWdpc3RlckFja0NhbGxiYWNrIiwiZW5naW5lIiwiX3BhY2tldCIsIm9uY29ubmVjdCIsIm9uZXZlbnQiLCJvbmFjayIsIm9uZGlzY29ubmVjdCIsImRlc3Ryb3kiLCJhY2siLCJlbWl0RXZlbnQiLCJfYW55TGlzdGVuZXJzIiwiZW1pdEJ1ZmZlcmVkIiwiX2Rlc3Ryb3kiLCJPdCIsIlN0IiwibXMiLCJtaW4iLCJtYXgiLCJmYWN0b3IiLCJqaXR0ZXIiLCJhdHRlbXB0cyIsImR1cmF0aW9uIiwicG93IiwicmFuZG9tIiwicmVzZXQiLCJzZXRNaW4iLCJzZXRNYXgiLCJzZXRKaXR0ZXIiLCJCdCIsIm5zcHMiLCJyZWNvbm5lY3Rpb24iLCJyZWNvbm5lY3Rpb25BdHRlbXB0cyIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsInBhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiYXV0b0Nvbm5lY3QiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5IiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJfdGltZW91dCIsInJlY29ubmVjdCIsInNraXBSZWNvbm5lY3QiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsIm9ucGluZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsImFkZCIsImFjdGl2ZSIsIl9jbG9zZSIsIm9ucmVjb25uZWN0IiwiTnQiLCJ4dCIsImhyZWYiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsIk1hbmFnZXIiLCJTb2NrZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/socket.io.js\n");

/***/ }),

/***/ "./resources/css/app.css":
/*!*******************************!*\
  !*** ./resources/css/app.css ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvY3NzL2FwcC5jc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Nzcy9hcHAuY3NzPzdmYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/css/app.css\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/socket.io": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/socket.io.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/css/app.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;